
AVRASM ver. 2.2.7  C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\main.asm Tue Dec 11 20:58:38 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328PBdef.inc'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\main.asm(2132): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_delay.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\main.asm(2133): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_SSD1306_OLED.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_SSD1306_OLED.asm(21): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_SPI.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\main.asm(2134): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_GFX.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_GFX.asm(19): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\character_map.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328PBdef.inc'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\main.asm(2132): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_delay.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\main.asm(2133): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_SSD1306_OLED.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_SSD1306_OLED.asm(21): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_SPI.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\main.asm(2134): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_GFX.asm'
C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\lib_GFX.asm(19): Including file 'C:\Users\samri\OneDrive\Desktop\Samriddh\CSC-330\Atmel Project\Beta\gupta_csc330_final_project\Final_in_Process\Final_in_Process\character_map.asm'
                                 
                                 ;
                                 
                                 
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;*
                                 ;* Number            : AVR000
                                 ;* File Name         : m328PBdef.inc
                                 ;* Title             : Register/Bit Definitions for the ATmega328PB
                                 ;* Created           : 2018-02-19 10:50
                                 ;* Version           : 1.00
                                 ;* Support e-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328PB
                                 ;*
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal
                                 ;* SRAM is also defined
                                 ;*
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PBDEF_INC_
                                 #define _M328PBDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device	ATmega328PB
                                 #pragma AVRPART ADMIN PART_NAME ATmega328PB
                                 .equ	SIGNATURE_000	= 0x1E
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x16
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED" are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	TWAMR1	= 0xDD ; MEMORY MAPPED
                                 .equ	TWCR1	= 0xDC ; MEMORY MAPPED
                                 .equ	TWDR1	= 0xDB ; MEMORY MAPPED
                                 .equ	TWAR1	= 0xDA ; MEMORY MAPPED
                                 .equ	TWSR1	= 0xD9 ; MEMORY MAPPED
                                 .equ	TWBR1	= 0xD8 ; MEMORY MAPPED
                                 .equ	UDR1	= 0xCE ; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xCD ; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xCC ; MEMORY MAPPED
                                 .equ	UCSR1D	= 0xCB ; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xCA ; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xC9 ; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xC8 ; MEMORY MAPPED
                                 .equ	UDR0	= 0xC6 ; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xC5 ; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xC4 ; MEMORY MAPPED
                                 .equ	UCSR0D	= 0xC3 ; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xC2 ; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xC1 ; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xC0 ; MEMORY MAPPED
                                 .equ	TWAMR0	= 0xBD ; MEMORY MAPPED
                                 .equ	TWCR0	= 0xBC ; MEMORY MAPPED
                                 .equ	TWDR0	= 0xBB ; MEMORY MAPPED
                                 .equ	TWAR0	= 0xBA ; MEMORY MAPPED
                                 .equ	TWSR0	= 0xB9 ; MEMORY MAPPED
                                 .equ	TWBR0	= 0xB8 ; MEMORY MAPPED
                                 .equ	ASSR	= 0xB6 ; MEMORY MAPPED
                                 .equ	OCR2B	= 0xB4 ; MEMORY MAPPED
                                 .equ	OCR2A	= 0xB3 ; MEMORY MAPPED
                                 .equ	TCNT2	= 0xB2 ; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xB1 ; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xB0 ; MEMORY MAPPED
                                 .equ	SPDR1	= 0xAE ; MEMORY MAPPED
                                 .equ	SPSR1	= 0xAD ; MEMORY MAPPED
                                 .equ	SPCR1	= 0xAC ; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xAB ; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xAA ; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xA9 ; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xA8 ; MEMORY MAPPED
                                 .equ	ICR4H	= 0xA7 ; MEMORY MAPPED
                                 .equ	ICR4L	= 0xA6 ; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xA5 ; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xA4 ; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xA2 ; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xA1 ; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xA0 ; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9B ; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9A ; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99 ; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98 ; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97 ; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96 ; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95 ; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94 ; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92 ; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91 ; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90 ; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8B ; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8A ; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89 ; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88 ; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87 ; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86 ; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85 ; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84 ; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82 ; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81 ; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80 ; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7F ; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7E ; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7C ; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7B ; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7A ; MEMORY MAPPED
                                 .equ	ADCH	= 0x79 ; MEMORY MAPPED
                                 .equ	ADCL	= 0x78 ; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73 ; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72 ; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71 ; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70 ; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6F ; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6E ; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6D ; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6C ; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6B ; MEMORY MAPPED
                                 .equ	EICRA	= 0x69 ; MEMORY MAPPED
                                 .equ	PCICR	= 0x68 ; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66 ; MEMORY MAPPED
                                 .equ	PRR1	= 0x65 ; MEMORY MAPPED
                                 .equ	PRR0	= 0x64 ; MEMORY MAPPED
                                 .equ	XFDCSR	= 0x62 ; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61 ; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60 ; MEMORY MAPPED
                                 .equ	SREG	= 0x3F ; 
                                 .equ	SPH	= 0x3E ; 
                                 .equ	SPL	= 0x3D ; 
                                 .equ	SPMCSR	= 0x37 ; 
                                 .equ	MCUCR	= 0x35 ; 
                                 .equ	MCUSR	= 0x34 ; 
                                 .equ	SMCR	= 0x33 ; 
                                 .equ	ACSRA	= 0x30 ; 
                                 .equ	ACSR	= 0x30 ; 
                                 .equ	ACSRB	= 0x2F ; 
                                 .equ	SPDR0	= 0x2E ; 
                                 .equ	SPSR0	= 0x2D ; 
                                 .equ	SPCR0	= 0x2C ; 
                                 .equ	GPIOR2	= 0x2B ; 
                                 .equ	GPIOR1	= 0x2A ; 
                                 .equ	OCR0B	= 0x28 ; 
                                 .equ	OCR0A	= 0x27 ; 
                                 .equ	TCNT0	= 0x26 ; 
                                 .equ	TCCR0B	= 0x25 ; 
                                 .equ	TCCR0A	= 0x24 ; 
                                 .equ	GTCCR	= 0x23 ; 
                                 .equ	EEARH	= 0x22 ; 
                                 .equ	EEARL	= 0x21 ; 
                                 .equ	EEDR	= 0x20 ; 
                                 .equ	EECR	= 0x1F ; 
                                 .equ	GPIOR0	= 0x1E ; 
                                 .equ	EIMSK	= 0x1D ; 
                                 .equ	EIFR	= 0x1C ; 
                                 .equ	PCIFR	= 0x1B ; 
                                 .equ	TIFR4	= 0x19 ; 
                                 .equ	TIFR3	= 0x18 ; 
                                 .equ	TIFR2	= 0x17 ; 
                                 .equ	TIFR1	= 0x16 ; 
                                 .equ	TIFR0	= 0x15 ; 
                                 .equ	PORTE	= 0x0E ; 
                                 .equ	DDRE	= 0x0D ; 
                                 .equ	PINE	= 0x0C ; 
                                 .equ	PORTD	= 0x0B ; 
                                 .equ	DDRD	= 0x0A ; 
                                 .equ	PIND	= 0x09 ; 
                                 .equ	PORTC	= 0x08 ; 
                                 .equ	DDRC	= 0x07 ; 
                                 .equ	PINC	= 0x06 ; 
                                 .equ	PORTB	= 0x05 ; 
                                 .equ	DDRB	= 0x04 ; 
                                 .equ	PINB	= 0x03 ; 
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 *****************
                                 ; UDR0 - USART I/O Data Register 0
                                 .equ	UDR00	= 0 ; USART I/O Data Register 0 Bit 0
                                 .equ	UDR01	= 1 ; USART I/O Data Register 0 Bit 1
                                 .equ	UDR02	= 2 ; USART I/O Data Register 0 Bit 2
                                 .equ	UDR03	= 3 ; USART I/O Data Register 0 Bit 3
                                 .equ	UDR04	= 4 ; USART I/O Data Register 0 Bit 4
                                 .equ	UDR05	= 5 ; USART I/O Data Register 0 Bit 5
                                 .equ	UDR06	= 6 ; USART I/O Data Register 0 Bit 6
                                 .equ	UDR07	= 7 ; USART I/O Data Register 0 Bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X0	= 1 ; Double the USART transmission speed
                                 .equ	UPE0	= 2 ; Parity Error
                                 .equ	DOR0	= 3 ; Data overRun
                                 .equ	FE0	= 4 ; Framing Error
                                 .equ	UDRE0	= 5 ; USART Data Register Empty
                                 .equ	TXC0	= 6 ; USART Transmitt Complete
                                 .equ	RXC0	= 7 ; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0 ; Transmit Data Bit 8
                                 .equ	RXB80	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ02	= 2 ; Character Size
                                 .equ	TXEN0	= 3 ; Transmitter Enable
                                 .equ	RXEN0	= 4 ; Receiver Enable
                                 .equ	UDRIE0	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0 ; Clock Polarity
                                 .equ	UCSZ00	= 1 ; Character Size
                                 .equ	UCSZ01	= 2 ; Character Size
                                 .equ	USBS0	= 3 ; Stop Bit Select
                                 .equ	UPM00	= 4 ; Parity Mode Bits
                                 .equ	UPM01	= 5 ; Parity Mode Bits
                                 .equ	UMSEL00	= 6 ; USART Mode Select
                                 .equ	UMSEL01	= 7 ; USART Mode Select
                                 
                                 ; UCSR0D - USART Control and Status Register D
                                 .equ	SFDE	= 5 ; Start frame detection enable
                                 .equ	RXS	= 6 ; USART RX Start
                                 .equ	RXSIE	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR0 - USART Baud Rate Register Bytes
                                 .equ	UBRR0H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR0H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR0H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR0H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR0L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR0L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR0L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR0L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR0L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR0L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR0L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR0L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** USART1 *****************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0 ; USART I/O Data Register Bit 0
                                 .equ	UDR11	= 1 ; USART I/O Data Register Bit 1
                                 .equ	UDR12	= 2 ; USART I/O Data Register Bit 2
                                 .equ	UDR13	= 3 ; USART I/O Data Register Bit 3
                                 .equ	UDR14	= 4 ; USART I/O Data Register Bit 4
                                 .equ	UDR15	= 5 ; USART I/O Data Register Bit 5
                                 .equ	UDR16	= 6 ; USART I/O Data Register Bit 6
                                 .equ	UDR17	= 7 ; USART I/O Data Register Bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X1	= 1 ; Double the USART transmission speed
                                 .equ	UPE1	= 2 ; Parity Error
                                 .equ	DOR1	= 3 ; Data overRun
                                 .equ	FE1	= 4 ; Framing Error
                                 .equ	UDRE1	= 5 ; USART Data Register Empty
                                 .equ	TXC1	= 6 ; USART Transmitt Complete
                                 .equ	RXC1	= 7 ; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0 ; Transmit Data Bit 8
                                 .equ	RXB81	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ12	= 2 ; Character Size
                                 .equ	TXEN1	= 3 ; Transmitter Enable
                                 .equ	RXEN1	= 4 ; Receiver Enable
                                 .equ	UDRIE1	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0 ; Clock Polarity
                                 .equ	UCSZ10	= 1 ; Character Size
                                 .equ	UCSZ11	= 2 ; Character Size
                                 .equ	USBS1	= 3 ; Stop Bit Select
                                 .equ	UPM10	= 4 ; Parity Mode Bits
                                 .equ	UPM11	= 5 ; Parity Mode Bits
                                 .equ	UMSEL10	= 6 ; USART Mode Select
                                 .equ	UMSEL11	= 7 ; USART Mode Select
                                 
                                 ; UCSR1D - USART Control and Status Register D
                                 .equ	SFDE1	= 5 ; Start frame detection enable
                                 .equ	RXS1	= 6 ; USART RX Start
                                 .equ	RXSIE1	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR1 - USART Baud Rate Register Bytes
                                 .equ	UBRR1H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR1H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR1H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR1H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR1L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR1L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR1L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR1L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR1L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR1L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR1L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR1L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TWI0 *****************
                                 ; TWAMR0 - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1 ; 
                                 .equ	TWAM1	= 2 ; 
                                 .equ	TWAM2	= 3 ; 
                                 .equ	TWAM3	= 4 ; 
                                 .equ	TWAM4	= 5 ; 
                                 .equ	TWAM5	= 6 ; 
                                 .equ	TWAM6	= 7 ; 
                                 
                                 ; TWBR0 - TWI Bit Rate register
                                 .equ	TWBR00	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR01	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR02	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR03	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR04	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR05	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR06	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR07	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR0 - TWI Control Register
                                 .equ	TWIE	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN	= 2 ; TWI Enable Bit
                                 .equ	TWWC	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR0 - TWI Status Register
                                 .equ	TWPS0	= 0 ; TWI Prescaler
                                 .equ	TWPS1	= 1 ; TWI Prescaler
                                 .equ	TWS3	= 3 ; TWI Status
                                 .equ	TWS4	= 4 ; TWI Status
                                 .equ	TWS5	= 5 ; TWI Status
                                 .equ	TWS6	= 6 ; TWI Status
                                 .equ	TWS7	= 7 ; TWI Status
                                 
                                 ; TWDR0 - TWI Data register
                                 .equ	TWDR00	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR01	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR02	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR03	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR04	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR05	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR06	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR07	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR0 - TWI (Slave) Address register
                                 .equ	TWGCE	= 0 ; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1 ; TWI (Slave) Address register Bits
                                 .equ	TWA1	= 2 ; TWI (Slave) Address register Bits
                                 .equ	TWA2	= 3 ; TWI (Slave) Address register Bits
                                 .equ	TWA3	= 4 ; TWI (Slave) Address register Bits
                                 .equ	TWA4	= 5 ; TWI (Slave) Address register Bits
                                 .equ	TWA5	= 6 ; TWI (Slave) Address register Bits
                                 .equ	TWA6	= 7 ; TWI (Slave) Address register Bits
                                 
                                 
                                 ; ***** TWI1 *****************
                                 ; TWAMR1 - TWI (Slave) Address Mask Register
                                 .equ	TWAM10	= 1 ; 
                                 .equ	TWAM11	= 2 ; 
                                 .equ	TWAM12	= 3 ; 
                                 .equ	TWAM13	= 4 ; 
                                 .equ	TWAM14	= 5 ; 
                                 .equ	TWAM15	= 6 ; 
                                 .equ	TWAM16	= 7 ; 
                                 
                                 ; TWBR1 - TWI Bit Rate register
                                 .equ	TWBR10	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR11	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR12	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR13	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR14	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR15	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR16	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR17	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR1 - TWI Control Register
                                 .equ	TWIE1	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN1	= 2 ; TWI Enable Bit
                                 .equ	TWWC1	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO1	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA1	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA1	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT1	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR1 - TWI Status Register
                                 .equ	TWPS10	= 0 ; TWI Prescaler
                                 .equ	TWPS11	= 1 ; TWI Prescaler
                                 .equ	TWS13	= 3 ; TWI Status
                                 .equ	TWS14	= 4 ; TWI Status
                                 .equ	TWS15	= 5 ; TWI Status
                                 .equ	TWS16	= 6 ; TWI Status
                                 .equ	TWS17	= 7 ; TWI Status
                                 
                                 ; TWDR1 - TWI Data register
                                 .equ	TWDR10	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR11	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR12	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR13	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR14	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR15	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR16	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR17	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR1 - TWI (Slave) Address register
                                 .equ	TWAR10	= 0 ; TWI (Slave) Address register Bit 0
                                 .equ	TWAR11	= 1 ; TWI (Slave) Address register Bit 1
                                 .equ	TWAR12	= 2 ; TWI (Slave) Address register Bit 2
                                 .equ	TWAR13	= 3 ; TWI (Slave) Address register Bit 3
                                 .equ	TWAR14	= 4 ; TWI (Slave) Address register Bit 4
                                 .equ	TWAR15	= 5 ; TWI (Slave) Address register Bit 5
                                 .equ	TWAR16	= 6 ; TWI (Slave) Address register Bit 6
                                 .equ	TWAR17	= 7 ; TWI (Slave) Address register Bit 7
                                 
                                 
                                 ; ***** TC1 *****************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0 ; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1 ; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2 ; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5 ; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0 ; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1 ; Output Compare Flag 1A
                                 .equ	OCF1B	= 2 ; Output Compare Flag 1B
                                 .equ	ICF1	= 5 ; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0 ; Waveform Generation Mode
                                 .equ	WGM11	= 1 ; Waveform Generation Mode
                                 .equ	COM1B0	= 4 ; Compare Output Mode 1B, bits
                                 .equ	COM1B1	= 5 ; Compare Output Mode 1B, bits
                                 .equ	COM1A0	= 6 ; Compare Output Mode 1A, bits
                                 .equ	COM1A1	= 7 ; Compare Output Mode 1A, bits
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0 ; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1 ; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2 ; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3 ; Waveform Generation Mode
                                 .equ	WGM13	= 4 ; Waveform Generation Mode
                                 .equ	ICES1	= 6 ; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7 ; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6 ; 
                                 .equ	FOC1A	= 7 ; 
                                 
                                 ; TCNT1 - Timer/Counter1 Bytes
                                 .equ	TCNT1H0	= 0 ; Timer/Counter1 Bytes High Bit 8
                                 .equ	TCNT1H1	= 1 ; Timer/Counter1 Bytes High Bit 9
                                 .equ	TCNT1H2	= 2 ; Timer/Counter1 Bytes High Bit 10
                                 .equ	TCNT1H3	= 3 ; Timer/Counter1 Bytes High Bit 11
                                 .equ	TCNT1H4	= 4 ; Timer/Counter1 Bytes High Bit 12
                                 .equ	TCNT1H5	= 5 ; Timer/Counter1 Bytes High Bit 13
                                 .equ	TCNT1H6	= 6 ; Timer/Counter1 Bytes High Bit 14
                                 .equ	TCNT1H7	= 7 ; Timer/Counter1 Bytes High Bit 15
                                 
                                 .equ	TCNT1L0	= 0 ; Timer/Counter1 Bytes Low Bit 0
                                 .equ	TCNT1L1	= 1 ; Timer/Counter1 Bytes Low Bit 1
                                 .equ	TCNT1L2	= 2 ; Timer/Counter1 Bytes Low Bit 2
                                 .equ	TCNT1L3	= 3 ; Timer/Counter1 Bytes Low Bit 3
                                 .equ	TCNT1L4	= 4 ; Timer/Counter1 Bytes Low Bit 4
                                 .equ	TCNT1L5	= 5 ; Timer/Counter1 Bytes Low Bit 5
                                 .equ	TCNT1L6	= 6 ; Timer/Counter1 Bytes Low Bit 6
                                 .equ	TCNT1L7	= 7 ; Timer/Counter1 Bytes Low Bit 7
                                 
                                 ; OCR1A - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1AH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1AH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1AH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1AH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1AH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1AH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1AH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1AH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1AL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1AL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1AL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1AL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1AL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1AL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1AL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1AL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR1B - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1BH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1BH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1BH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1BH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1BH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1BH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1BH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1BH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1BL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1BL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1BL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1BL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1BL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1BL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1BL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1BL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR1 - Timer/Counter1 Input Capture Register Bytes
                                 .equ	ICR1H0	= 0 ; Timer/Counter1 Input Capture Register Bytes High Bit 8
                                 .equ	ICR1H1	= 1 ; Timer/Counter1 Input Capture Register Bytes High Bit 9
                                 .equ	ICR1H2	= 2 ; Timer/Counter1 Input Capture Register Bytes High Bit 10
                                 .equ	ICR1H3	= 3 ; Timer/Counter1 Input Capture Register Bytes High Bit 11
                                 .equ	ICR1H4	= 4 ; Timer/Counter1 Input Capture Register Bytes High Bit 12
                                 .equ	ICR1H5	= 5 ; Timer/Counter1 Input Capture Register Bytes High Bit 13
                                 .equ	ICR1H6	= 6 ; Timer/Counter1 Input Capture Register Bytes High Bit 14
                                 .equ	ICR1H7	= 7 ; Timer/Counter1 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR1L0	= 0 ; Timer/Counter1 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR1L1	= 1 ; Timer/Counter1 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR1L2	= 2 ; Timer/Counter1 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR1L3	= 3 ; Timer/Counter1 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR1L4	= 4 ; Timer/Counter1 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR1L5	= 5 ; Timer/Counter1 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR1L6	= 6 ; Timer/Counter1 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR1L7	= 7 ; Timer/Counter1 Input Capture Register Bytes Low Bit 7
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0 ; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7 ; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TC3 *****************
                                 ; TIMSK3 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE3	= 0 ; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1 ; Timer/Counter3 Output Compare Match A Interrupt Enable
                                 .equ	OCIE3B	= 2 ; Timer/Counter3 Output Compare Match B Interrupt Enable
                                 .equ	ICIE3	= 5 ; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0 ; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1 ; Output Compare Flag 3A
                                 .equ	OCF3B	= 2 ; Output Compare Flag 3B
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0 ; Waveform Genration Mode
                                 .equ	WGM31	= 1 ; Waveform Genration Mode
                                 .equ	COM3B0	= 4 ; Compare Output Mode bits
                                 .equ	COM3B1	= 5 ; Compare Output Mode bits
                                 .equ	COM3A0	= 6 ; Compare Output Mode bits
                                 .equ	COM3A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0 ; Clock Select bits
                                 .equ	CS31	= 1 ; Clock Select bits
                                 .equ	CS32	= 2 ; Clock Select bits
                                 .equ	WGM32	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM33	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES3	= 6 ; Input Capture Edge Select
                                 .equ	ICNC3	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC3A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT3 - Timer/Counter3 Bytes
                                 .equ	TCNT3H0	= 0 ; Timer/Counter3 Bytes High Bit 8
                                 .equ	TCNT3H1	= 1 ; Timer/Counter3 Bytes High Bit 9
                                 .equ	TCNT3H2	= 2 ; Timer/Counter3 Bytes High Bit 10
                                 .equ	TCNT3H3	= 3 ; Timer/Counter3 Bytes High Bit 11
                                 .equ	TCNT3H4	= 4 ; Timer/Counter3 Bytes High Bit 12
                                 .equ	TCNT3H5	= 5 ; Timer/Counter3 Bytes High Bit 13
                                 .equ	TCNT3H6	= 6 ; Timer/Counter3 Bytes High Bit 14
                                 .equ	TCNT3H7	= 7 ; Timer/Counter3 Bytes High Bit 15
                                 
                                 .equ	TCNT3L0	= 0 ; Timer/Counter3 Bytes Low Bit 0
                                 .equ	TCNT3L1	= 1 ; Timer/Counter3 Bytes Low Bit 1
                                 .equ	TCNT3L2	= 2 ; Timer/Counter3 Bytes Low Bit 2
                                 .equ	TCNT3L3	= 3 ; Timer/Counter3 Bytes Low Bit 3
                                 .equ	TCNT3L4	= 4 ; Timer/Counter3 Bytes Low Bit 4
                                 .equ	TCNT3L5	= 5 ; Timer/Counter3 Bytes Low Bit 5
                                 .equ	TCNT3L6	= 6 ; Timer/Counter3 Bytes Low Bit 6
                                 .equ	TCNT3L7	= 7 ; Timer/Counter3 Bytes Low Bit 7
                                 
                                 ; OCR3A - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3AH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3AH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3AH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3AH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3AH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3AH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3AH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3AH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3AL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3AL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3AL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3AL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3AL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3AL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3AL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3AL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR3B - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3BH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3BH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3BH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3BH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3BH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3BH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3BH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3BH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3BL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3BL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3BL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3BL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3BL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3BL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3BL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3BL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR3 - Timer/Counter3 Input Capture Register Bytes
                                 .equ	ICR3H0	= 0 ; Timer/Counter3 Input Capture Register Bytes High Bit 8
                                 .equ	ICR3H1	= 1 ; Timer/Counter3 Input Capture Register Bytes High Bit 9
                                 .equ	ICR3H2	= 2 ; Timer/Counter3 Input Capture Register Bytes High Bit 10
                                 .equ	ICR3H3	= 3 ; Timer/Counter3 Input Capture Register Bytes High Bit 11
                                 .equ	ICR3H4	= 4 ; Timer/Counter3 Input Capture Register Bytes High Bit 12
                                 .equ	ICR3H5	= 5 ; Timer/Counter3 Input Capture Register Bytes High Bit 13
                                 .equ	ICR3H6	= 6 ; Timer/Counter3 Input Capture Register Bytes High Bit 14
                                 .equ	ICR3H7	= 7 ; Timer/Counter3 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR3L0	= 0 ; Timer/Counter3 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR3L1	= 1 ; Timer/Counter3 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR3L2	= 2 ; Timer/Counter3 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR3L3	= 3 ; Timer/Counter3 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR3L4	= 4 ; Timer/Counter3 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR3L5	= 5 ; Timer/Counter3 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR3L6	= 6 ; Timer/Counter3 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR3L7	= 7 ; Timer/Counter3 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC4 *****************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0 ; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1 ; Timer/Counter4 Output Compare Match A Interrupt Enable
                                 .equ	OCIE4B	= 2 ; Timer/Counter4 Output Compare Match B Interrupt Enable
                                 .equ	ICIE4	= 5 ; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0 ; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1 ; Output Compare Flag 4A
                                 .equ	OCF4B	= 2 ; Output Compare Flag 4B
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0 ; Waveform Genration Mode
                                 .equ	WGM41	= 1 ; Waveform Genration Mode
                                 .equ	COM4B0	= 4 ; Compare Output Mode bits
                                 .equ	COM4B1	= 5 ; Compare Output Mode bits
                                 .equ	COM4A0	= 6 ; Compare Output Mode bits
                                 .equ	COM4A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0 ; Clock Select bits
                                 .equ	CS41	= 1 ; Clock Select bits
                                 .equ	CS42	= 2 ; Clock Select bits
                                 .equ	WGM42	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM43	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES4	= 6 ; Input Capture Edge Select
                                 .equ	ICNC4	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter4 Control Register C
                                 .equ	FOC4B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC4A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT4 - Timer/Counter4 Bytes
                                 .equ	TCNT4H0	= 0 ; Timer/Counter4 Bytes High Bit 8
                                 .equ	TCNT4H1	= 1 ; Timer/Counter4 Bytes High Bit 9
                                 .equ	TCNT4H2	= 2 ; Timer/Counter4 Bytes High Bit 10
                                 .equ	TCNT4H3	= 3 ; Timer/Counter4 Bytes High Bit 11
                                 .equ	TCNT4H4	= 4 ; Timer/Counter4 Bytes High Bit 12
                                 .equ	TCNT4H5	= 5 ; Timer/Counter4 Bytes High Bit 13
                                 .equ	TCNT4H6	= 6 ; Timer/Counter4 Bytes High Bit 14
                                 .equ	TCNT4H7	= 7 ; Timer/Counter4 Bytes High Bit 15
                                 
                                 .equ	TCNT4L0	= 0 ; Timer/Counter4 Bytes Low Bit 0
                                 .equ	TCNT4L1	= 1 ; Timer/Counter4 Bytes Low Bit 1
                                 .equ	TCNT4L2	= 2 ; Timer/Counter4 Bytes Low Bit 2
                                 .equ	TCNT4L3	= 3 ; Timer/Counter4 Bytes Low Bit 3
                                 .equ	TCNT4L4	= 4 ; Timer/Counter4 Bytes Low Bit 4
                                 .equ	TCNT4L5	= 5 ; Timer/Counter4 Bytes Low Bit 5
                                 .equ	TCNT4L6	= 6 ; Timer/Counter4 Bytes Low Bit 6
                                 .equ	TCNT4L7	= 7 ; Timer/Counter4 Bytes Low Bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4AH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4AH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4AH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4AH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4AH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4AH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4AH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4AH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4AL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4AL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4AL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4AL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4AL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4AL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4AL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4AL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4BH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4BH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4BH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4BH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4BH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4BH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4BH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4BH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4BL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4BL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4BL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4BL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4BL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4BL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4BL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4BL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR4 - Timer/Counter4 Input Capture Register Bytes
                                 .equ	ICR4H0	= 0 ; Timer/Counter4 Input Capture Register Bytes High Bit 8
                                 .equ	ICR4H1	= 1 ; Timer/Counter4 Input Capture Register Bytes High Bit 9
                                 .equ	ICR4H2	= 2 ; Timer/Counter4 Input Capture Register Bytes High Bit 10
                                 .equ	ICR4H3	= 3 ; Timer/Counter4 Input Capture Register Bytes High Bit 11
                                 .equ	ICR4H4	= 4 ; Timer/Counter4 Input Capture Register Bytes High Bit 12
                                 .equ	ICR4H5	= 5 ; Timer/Counter4 Input Capture Register Bytes High Bit 13
                                 .equ	ICR4H6	= 6 ; Timer/Counter4 Input Capture Register Bytes High Bit 14
                                 .equ	ICR4H7	= 7 ; Timer/Counter4 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR4L0	= 0 ; Timer/Counter4 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR4L1	= 1 ; Timer/Counter4 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR4L2	= 2 ; Timer/Counter4 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR4L3	= 3 ; Timer/Counter4 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR4L4	= 4 ; Timer/Counter4 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR4L5	= 5 ; Timer/Counter4 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR4L6	= 6 ; Timer/Counter4 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR4L7	= 7 ; Timer/Counter4 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC2 *****************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0 ; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2A	= 1 ; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2 ; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0 ; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1 ; Output Compare Flag 2A
                                 .equ	OCF2B	= 2 ; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0 ; Waveform Genration Mode
                                 .equ	WGM21	= 1 ; Waveform Genration Mode
                                 .equ	COM2B0	= 4 ; Compare Output Mode bits
                                 .equ	COM2B1	= 5 ; Compare Output Mode bits
                                 .equ	COM2A0	= 6 ; Compare Output Mode bits
                                 .equ	COM2A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0 ; Clock Select bits
                                 .equ	CS21	= 1 ; Clock Select bits
                                 .equ	CS22	= 2 ; Clock Select bits
                                 .equ	WGM22	= 3 ; Waveform Generation Mode
                                 .equ	FOC2B	= 6 ; Force Output Compare B
                                 .equ	FOC2A	= 7 ; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT20	= 0 ; Timer/Counter2 Bit 0
                                 .equ	TCNT21	= 1 ; Timer/Counter2 Bit 1
                                 .equ	TCNT22	= 2 ; Timer/Counter2 Bit 2
                                 .equ	TCNT23	= 3 ; Timer/Counter2 Bit 3
                                 .equ	TCNT24	= 4 ; Timer/Counter2 Bit 4
                                 .equ	TCNT25	= 5 ; Timer/Counter2 Bit 5
                                 .equ	TCNT26	= 6 ; Timer/Counter2 Bit 6
                                 .equ	TCNT27	= 7 ; Timer/Counter2 Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B0	= 0 ; Timer/Counter2 Output Compare Register B Bit 0
                                 .equ	OCR2B1	= 1 ; Timer/Counter2 Output Compare Register B Bit 1
                                 .equ	OCR2B2	= 2 ; Timer/Counter2 Output Compare Register B Bit 2
                                 .equ	OCR2B3	= 3 ; Timer/Counter2 Output Compare Register B Bit 3
                                 .equ	OCR2B4	= 4 ; Timer/Counter2 Output Compare Register B Bit 4
                                 .equ	OCR2B5	= 5 ; Timer/Counter2 Output Compare Register B Bit 5
                                 .equ	OCR2B6	= 6 ; Timer/Counter2 Output Compare Register B Bit 6
                                 .equ	OCR2B7	= 7 ; Timer/Counter2 Output Compare Register B Bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A0	= 0 ; Timer/Counter2 Output Compare Register A Bit 0
                                 .equ	OCR2A1	= 1 ; Timer/Counter2 Output Compare Register A Bit 1
                                 .equ	OCR2A2	= 2 ; Timer/Counter2 Output Compare Register A Bit 2
                                 .equ	OCR2A3	= 3 ; Timer/Counter2 Output Compare Register A Bit 3
                                 .equ	OCR2A4	= 4 ; Timer/Counter2 Output Compare Register A Bit 4
                                 .equ	OCR2A5	= 5 ; Timer/Counter2 Output Compare Register A Bit 5
                                 .equ	OCR2A6	= 6 ; Timer/Counter2 Output Compare Register A Bit 6
                                 .equ	OCR2A7	= 7 ; Timer/Counter2 Output Compare Register A Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0 ; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1 ; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2 ; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3 ; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4 ; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5 ; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6 ; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1 ; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** ADC *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0 ; Analog Channel Selection Bits
                                 .equ	MUX1	= 1 ; Analog Channel Selection Bits
                                 .equ	MUX2	= 2 ; Analog Channel Selection Bits
                                 .equ	MUX3	= 3 ; Analog Channel Selection Bits
                                 .equ	ADLAR	= 5 ; Left Adjust Result
                                 .equ	REFS0	= 6 ; Reference Selection Bits
                                 .equ	REFS1	= 7 ; Reference Selection Bits
                                 
                                 ; ADC - ADC Data Register Bytes
                                 .equ	ADCH0	= 0 ; ADC Data Register Bytes High Bit 8
                                 .equ	ADCH1	= 1 ; ADC Data Register Bytes High Bit 9
                                 .equ	ADCH2	= 2 ; ADC Data Register Bytes High Bit 10
                                 .equ	ADCH3	= 3 ; ADC Data Register Bytes High Bit 11
                                 .equ	ADCH4	= 4 ; ADC Data Register Bytes High Bit 12
                                 .equ	ADCH5	= 5 ; ADC Data Register Bytes High Bit 13
                                 .equ	ADCH6	= 6 ; ADC Data Register Bytes High Bit 14
                                 .equ	ADCH7	= 7 ; ADC Data Register Bytes High Bit 15
                                 
                                 .equ	ADCL0	= 0 ; ADC Data Register Bytes Low Bit 0
                                 .equ	ADCL1	= 1 ; ADC Data Register Bytes Low Bit 1
                                 .equ	ADCL2	= 2 ; ADC Data Register Bytes Low Bit 2
                                 .equ	ADCL3	= 3 ; ADC Data Register Bytes Low Bit 3
                                 .equ	ADCL4	= 4 ; ADC Data Register Bytes Low Bit 4
                                 .equ	ADCL5	= 5 ; ADC Data Register Bytes Low Bit 5
                                 .equ	ADCL6	= 6 ; ADC Data Register Bytes Low Bit 6
                                 .equ	ADCL7	= 7 ; ADC Data Register Bytes Low Bit 7
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0 ; ADC Prescaler Select Bits
                                 .equ	ADPS1	= 1 ; ADC Prescaler Select Bits
                                 .equ	ADPS2	= 2 ; ADC Prescaler Select Bits
                                 .equ	ADIE	= 3 ; ADC Interrupt Enable
                                 .equ	ADIF	= 4 ; ADC Interrupt Flag
                                 .equ	ADATE	= 5 ; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6 ; ADC Start Conversion
                                 .equ	ADEN	= 7 ; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0 ; ADC Auto Trigger Source bits
                                 .equ	ADTS1	= 1 ; ADC Auto Trigger Source bits
                                 .equ	ADTS2	= 2 ; ADC Auto Trigger Source bits
                                 .equ	ACME	= 6 ; 
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0 ; 
                                 .equ	ADC1D	= 1 ; 
                                 .equ	ADC2D	= 2 ; 
                                 .equ	ADC3D	= 3 ; 
                                 .equ	ADC4D	= 4 ; 
                                 .equ	ADC5D	= 5 ; 
                                 
                                 
                                 ; ***** AC *****************
                                 ; ACSRA - Analog Comparator Control And Status Register-A
                                 .equ	ACSRA0	= 0 ; Analog Comparator Control And Status Register-A Bit 0
                                 .equ	ACSRA1	= 1 ; Analog Comparator Control And Status Register-A Bit 1
                                 .equ	ACSRA2	= 2 ; Analog Comparator Control And Status Register-A Bit 2
                                 .equ	ACSRA3	= 3 ; Analog Comparator Control And Status Register-A Bit 3
                                 .equ	ACSRA4	= 4 ; Analog Comparator Control And Status Register-A Bit 4
                                 .equ	ACSRA5	= 5 ; Analog Comparator Control And Status Register-A Bit 5
                                 .equ	ACSRA6	= 6 ; Analog Comparator Control And Status Register-A Bit 6
                                 .equ	ACSRA7	= 7 ; Analog Comparator Control And Status Register-A Bit 7
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIS1	= 1 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIC	= 2 ; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3 ; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4 ; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5 ; Analog Compare Output
                                 .equ	ACBG	= 6 ; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7 ; Analog Comparator Disable
                                 
                                 ; ACSRB - Analog Comparator Control And Status Register-B
                                 .equ	ACOE	= 0 ; Analog Comparator Output Enable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0 ; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1 ; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB *****************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0 ; Port B Data Register Bit 0
                                 .equ	PORTB1	= 1 ; Port B Data Register Bit 1
                                 .equ	PORTB2	= 2 ; Port B Data Register Bit 2
                                 .equ	PORTB3	= 3 ; Port B Data Register Bit 3
                                 .equ	PORTB4	= 4 ; Port B Data Register Bit 4
                                 .equ	PORTB5	= 5 ; Port B Data Register Bit 5
                                 .equ	PORTB6	= 6 ; Port B Data Register Bit 6
                                 .equ	PORTB7	= 7 ; Port B Data Register Bit 7
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDRB0	= 0 ; Port B Data Direction Register Bit 0
                                 .equ	DDRB1	= 1 ; Port B Data Direction Register Bit 1
                                 .equ	DDRB2	= 2 ; Port B Data Direction Register Bit 2
                                 .equ	DDRB3	= 3 ; Port B Data Direction Register Bit 3
                                 .equ	DDRB4	= 4 ; Port B Data Direction Register Bit 4
                                 .equ	DDRB5	= 5 ; Port B Data Direction Register Bit 5
                                 .equ	DDRB6	= 6 ; Port B Data Direction Register Bit 6
                                 .equ	DDRB7	= 7 ; Port B Data Direction Register Bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0 ; Port B Input Pins Bit 0
                                 .equ	PINB1	= 1 ; Port B Input Pins Bit 1
                                 .equ	PINB2	= 2 ; Port B Input Pins Bit 2
                                 .equ	PINB3	= 3 ; Port B Input Pins Bit 3
                                 .equ	PINB4	= 4 ; Port B Input Pins Bit 4
                                 .equ	PINB5	= 5 ; Port B Input Pins Bit 5
                                 .equ	PINB6	= 6 ; Port B Input Pins Bit 6
                                 .equ	PINB7	= 7 ; Port B Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTC *****************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0 ; Port C Data Register Bit 0
                                 .equ	PORTC1	= 1 ; Port C Data Register Bit 1
                                 .equ	PORTC2	= 2 ; Port C Data Register Bit 2
                                 .equ	PORTC3	= 3 ; Port C Data Register Bit 3
                                 .equ	PORTC4	= 4 ; Port C Data Register Bit 4
                                 .equ	PORTC5	= 5 ; Port C Data Register Bit 5
                                 .equ	PORTC6	= 6 ; Port C Data Register Bit 6
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDRC0	= 0 ; Port C Data Direction Register Bit 0
                                 .equ	DDRC1	= 1 ; Port C Data Direction Register Bit 1
                                 .equ	DDRC2	= 2 ; Port C Data Direction Register Bit 2
                                 .equ	DDRC3	= 3 ; Port C Data Direction Register Bit 3
                                 .equ	DDRC4	= 4 ; Port C Data Direction Register Bit 4
                                 .equ	DDRC5	= 5 ; Port C Data Direction Register Bit 5
                                 .equ	DDRC6	= 6 ; Port C Data Direction Register Bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0 ; Port C Input Pins Bit 0
                                 .equ	PINC1	= 1 ; Port C Input Pins Bit 1
                                 .equ	PINC2	= 2 ; Port C Input Pins Bit 2
                                 .equ	PINC3	= 3 ; Port C Input Pins Bit 3
                                 .equ	PINC4	= 4 ; Port C Input Pins Bit 4
                                 .equ	PINC5	= 5 ; Port C Input Pins Bit 5
                                 .equ	PINC6	= 6 ; Port C Input Pins Bit 6
                                 
                                 
                                 ; ***** PORTD *****************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0 ; Port D Data Register Bit 0
                                 .equ	PORTD1	= 1 ; Port D Data Register Bit 1
                                 .equ	PORTD2	= 2 ; Port D Data Register Bit 2
                                 .equ	PORTD3	= 3 ; Port D Data Register Bit 3
                                 .equ	PORTD4	= 4 ; Port D Data Register Bit 4
                                 .equ	PORTD5	= 5 ; Port D Data Register Bit 5
                                 .equ	PORTD6	= 6 ; Port D Data Register Bit 6
                                 .equ	PORTD7	= 7 ; Port D Data Register Bit 7
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDRD0	= 0 ; Port D Data Direction Register Bit 0
                                 .equ	DDRD1	= 1 ; Port D Data Direction Register Bit 1
                                 .equ	DDRD2	= 2 ; Port D Data Direction Register Bit 2
                                 .equ	DDRD3	= 3 ; Port D Data Direction Register Bit 3
                                 .equ	DDRD4	= 4 ; Port D Data Direction Register Bit 4
                                 .equ	DDRD5	= 5 ; Port D Data Direction Register Bit 5
                                 .equ	DDRD6	= 6 ; Port D Data Direction Register Bit 6
                                 .equ	DDRD7	= 7 ; Port D Data Direction Register Bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0 ; Port D Input Pins Bit 0
                                 .equ	PIND1	= 1 ; Port D Input Pins Bit 1
                                 .equ	PIND2	= 2 ; Port D Input Pins Bit 2
                                 .equ	PIND3	= 3 ; Port D Input Pins Bit 3
                                 .equ	PIND4	= 4 ; Port D Input Pins Bit 4
                                 .equ	PIND5	= 5 ; Port D Input Pins Bit 5
                                 .equ	PIND6	= 6 ; Port D Input Pins Bit 6
                                 .equ	PIND7	= 7 ; Port D Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTE *****************
                                 ; PORTE - Port E Data Register
                                 .equ	PORTE0	= 0 ; Port E Data Register Bit 0
                                 .equ	PORTE1	= 1 ; Port E Data Register Bit 1
                                 .equ	PORTE2	= 2 ; Port E Data Register Bit 2
                                 .equ	PORTE3	= 3 ; Port E Data Register Bit 3
                                 
                                 ; DDRE - Port E Data Direction Register
                                 .equ	DDRE0	= 0 ; Port E Data Direction Register Bit 0
                                 .equ	DDRE1	= 1 ; Port E Data Direction Register Bit 1
                                 .equ	DDRE2	= 2 ; Port E Data Direction Register Bit 2
                                 .equ	DDRE3	= 3 ; Port E Data Direction Register Bit 3
                                 
                                 ; PINE - Port E Input Pins
                                 .equ	PINE0	= 0 ; Port E Input Pins Bit 0
                                 .equ	PINE1	= 1 ; Port E Input Pins Bit 1
                                 .equ	PINE2	= 2 ; Port E Input Pins Bit 2
                                 .equ	PINE3	= 3 ; Port E Input Pins Bit 3
                                 
                                 
                                 ; ***** TC0 *****************
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0B1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0B2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0B3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0B4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0B5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0B6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0B7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0A1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0A2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0A3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0A4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0A5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0A6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0A7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT00	= 0 ; Timer/Counter0 Bit 0
                                 .equ	TCNT01	= 1 ; Timer/Counter0 Bit 1
                                 .equ	TCNT02	= 2 ; Timer/Counter0 Bit 2
                                 .equ	TCNT03	= 3 ; Timer/Counter0 Bit 3
                                 .equ	TCNT04	= 4 ; Timer/Counter0 Bit 4
                                 .equ	TCNT05	= 5 ; Timer/Counter0 Bit 5
                                 .equ	TCNT06	= 6 ; Timer/Counter0 Bit 6
                                 .equ	TCNT07	= 7 ; Timer/Counter0 Bit 7
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0 ; Clock Select
                                 .equ	CS01	= 1 ; Clock Select
                                 .equ	CS02	= 2 ; Clock Select
                                 .equ	WGM02	= 3 ; 
                                 .equ	FOC0B	= 6 ; Force Output Compare B
                                 .equ	FOC0A	= 7 ; Force Output Compare A
                                 
                                 ; TCCR0A - Timer/Counter Control Register A
                                 .equ	WGM00	= 0 ; Waveform Generation Mode
                                 .equ	WGM01	= 1 ; Waveform Generation Mode
                                 .equ	COM0B0	= 4 ; Compare Output Mode, Fast PWM
                                 .equ	COM0B1	= 5 ; Compare Output Mode, Fast PWM
                                 .equ	COM0A0	= 6 ; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7 ; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0 ; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1 ; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2 ; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0 ; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1 ; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2 ; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 
                                 
                                 ; ***** EXINT *****************
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC01	= 1 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC10	= 2 ; External Interrupt Sense Control 1 Bits
                                 .equ	ISC11	= 3 ; External Interrupt Sense Control 1 Bits
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0 ; External Interrupt Request 1 Enable
                                 .equ	INT1	= 1 ; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0 ; External Interrupt Flags
                                 .equ	INTF1	= 1 ; External Interrupt Flags
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0 ; Pin Change Interrupt Enables
                                 .equ	PCIE1	= 1 ; Pin Change Interrupt Enables
                                 .equ	PCIE2	= 2 ; Pin Change Interrupt Enables
                                 .equ	PCIE3	= 3 ; Pin Change Interrupt Enables
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT25	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT26	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT27	= 3 ; Pin Change Enable Masks
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT17	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT18	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT19	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT20	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT21	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT22	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT23	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT9	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT10	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT11	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT12	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT13	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT14	= 6 ; Pin Change Enable Masks
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT1	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT2	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT3	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT4	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT5	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT6	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT7	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0 ; Pin Change Interrupt Flags
                                 .equ	PCIF1	= 1 ; Pin Change Interrupt Flags
                                 .equ	PCIF2	= 2 ; Pin Change Interrupt Flags
                                 .equ	PCIF3	= 3 ; Pin Change Interrupt Flags
                                 
                                 
                                 ; ***** SPI0 *****************
                                 ; SPDR0 - SPI Data Register
                                 .equ	SPDR00	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR01	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR02	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR03	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR04	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR05	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR06	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR07	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR0 - SPI Status Register
                                 .equ	SPI2X	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL	= 6 ; Write Collision Flag
                                 .equ	SPIF	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR0 - SPI Control Register
                                 .equ	SPR0	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR1	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA	= 2 ; Clock Phase
                                 .equ	CPOL	= 3 ; Clock polarity
                                 .equ	MSTR	= 4 ; Master/Slave Select
                                 .equ	DORD	= 5 ; Data Order
                                 .equ	SPE	= 6 ; SPI Enable
                                 .equ	SPIE	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** SPI1 *****************
                                 ; SPDR1 - SPI Data Register
                                 .equ	SPDR10	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR11	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR12	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR13	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR14	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR15	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR16	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR17	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR1 - SPI Status Register
                                 .equ	SPI2X1	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL1	= 6 ; Write Collision Flag
                                 .equ	SPIF1	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR1 - SPI Control Register
                                 .equ	SPR10	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR11	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA1	= 2 ; Clock Phase
                                 .equ	CPOL1	= 3 ; Clock polarity
                                 .equ	MSTR1	= 4 ; Master/Slave Select
                                 .equ	DORD1	= 5 ; Data Order
                                 .equ	SPE1	= 6 ; SPI Enable
                                 .equ	SPIE1	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WDT *****************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDE	= 3 ; Watch Dog Enable
                                 .equ	WDCE	= 4 ; Watchdog Change Enable
                                 .equ	WDP0	= 0 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP1	= 1 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP2	= 2 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP3	= 5 ; Watchdog Timer Prescaler Bits
                                 .equ	WDIE	= 6 ; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7 ; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PTC *****************
                                 ; ***** CPU *****************
                                 ; PRR0 - Power Reduction Register 0
                                 .equ	PRADC	= 0 ; Power Reduction ADC
                                 .equ	PRUSART0	= 1 ; Power Reduction USART0
                                 .equ	PRSPI0	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM1	= 3 ; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4 ; Power Reduction USART1
                                 .equ	PRTIM0	= 5 ; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6 ; Power Reduction Timer/Counter2
                                 .equ	PRTWI0	= 7 ; Power Reduction TWI0
                                 
                                 ; PRR1 - Power Reduction Register 1
                                 .equ	PRTIM3	= 0 ; Power Reduction Timer/Counter3
                                 .equ	PRSPI1	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM4	= 3 ; Power Reduction Timer/Counter4
                                 .equ	PRPTC	= 4 ; Power Reduction Peripheral Touch Controller
                                 .equ	PRTWI1	= 5 ; Power Reduction TWI1
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	OSCCAL0	= 0 ; Oscillator Calibration
                                 .equ	OSCCAL1	= 1 ; Oscillator Calibration
                                 .equ	OSCCAL2	= 2 ; Oscillator Calibration
                                 .equ	OSCCAL3	= 3 ; Oscillator Calibration
                                 .equ	OSCCAL4	= 4 ; Oscillator Calibration
                                 .equ	OSCCAL5	= 5 ; Oscillator Calibration
                                 .equ	OSCCAL6	= 6 ; Oscillator Calibration
                                 .equ	OSCCAL7	= 7 ; Oscillator Calibration
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0 ; Clock Prescaler Select Bits
                                 .equ	CLKPS1	= 1 ; Clock Prescaler Select Bits
                                 .equ	CLKPS2	= 2 ; Clock Prescaler Select Bits
                                 .equ	CLKPS3	= 3 ; Clock Prescaler Select Bits
                                 .equ	CLKPCE	= 7 ; Clock Prescaler Change Enable
                                 
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0 ; Carry Flag
                                 .equ	SREG_Z	= 1 ; Zero Flag
                                 .equ	SREG_N	= 2 ; Negative Flag
                                 .equ	SREG_V	= 3 ; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4 ; Sign Bit
                                 .equ	SREG_H	= 5 ; Half Carry Flag
                                 .equ	SREG_T	= 6 ; Bit Copy Storage
                                 .equ	SREG_I	= 7 ; Global Interrupt Enable
                                 
                                 ; SP - Stack Pointer
                                 .equ	SPH0	= 0 ; Stack Pointer High Bit 8
                                 .equ	SPH1	= 1 ; Stack Pointer High Bit 9
                                 .equ	SPH2	= 2 ; Stack Pointer High Bit 10
                                 .equ	SPH3	= 3 ; Stack Pointer High Bit 11
                                 
                                 .equ	SPL0	= 0 ; Stack Pointer Low Bit 0
                                 .equ	SPL1	= 1 ; Stack Pointer Low Bit 1
                                 .equ	SPL2	= 2 ; Stack Pointer Low Bit 2
                                 .equ	SPL3	= 3 ; Stack Pointer Low Bit 3
                                 .equ	SPL4	= 4 ; Stack Pointer Low Bit 4
                                 .equ	SPL5	= 5 ; Stack Pointer Low Bit 5
                                 .equ	SPL6	= 6 ; Stack Pointer Low Bit 6
                                 .equ	SPL7	= 7 ; Stack Pointer Low Bit 7
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ	SPMEN	= 0 ; Store Program Memory
                                 .equ	PGERS	= 1 ; Page Erase
                                 .equ	PGWRT	= 2 ; Page Write
                                 .equ	BLBSET	= 3 ; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4 ; Read-While-Write section read enable
                                 .equ	SIGRD	= 5 ; Signature Row Read
                                 .equ	RWWSB	= 6 ; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7 ; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0 ; 
                                 .equ	IVSEL	= 1 ; 
                                 .equ	PUD	= 4 ; 
                                 .equ	BODSE	= 5 ; BOD Sleep Enable
                                 .equ	BODS	= 6 ; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0 ; Power-on reset flag
                                 .equ	EXTRF	= 1 ; External Reset Flag
                                 .equ	BORF	= 2 ; Brown-out Reset Flag
                                 .equ	WDRF	= 3 ; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0 ; Sleep Enable
                                 .equ	SM0	= 1 ; Sleep Mode Select Bits
                                 .equ	SM1	= 2 ; Sleep Mode Select Bits
                                 .equ	SM2	= 3 ; Sleep Mode Select Bits
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0 ; General Purpose I/O Register 2 Bit 0
                                 .equ	GPIOR21	= 1 ; General Purpose I/O Register 2 Bit 1
                                 .equ	GPIOR22	= 2 ; General Purpose I/O Register 2 Bit 2
                                 .equ	GPIOR23	= 3 ; General Purpose I/O Register 2 Bit 3
                                 .equ	GPIOR24	= 4 ; General Purpose I/O Register 2 Bit 4
                                 .equ	GPIOR25	= 5 ; General Purpose I/O Register 2 Bit 5
                                 .equ	GPIOR26	= 6 ; General Purpose I/O Register 2 Bit 6
                                 .equ	GPIOR27	= 7 ; General Purpose I/O Register 2 Bit 7
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0 ; General Purpose I/O Register 1 Bit 0
                                 .equ	GPIOR11	= 1 ; General Purpose I/O Register 1 Bit 1
                                 .equ	GPIOR12	= 2 ; General Purpose I/O Register 1 Bit 2
                                 .equ	GPIOR13	= 3 ; General Purpose I/O Register 1 Bit 3
                                 .equ	GPIOR14	= 4 ; General Purpose I/O Register 1 Bit 4
                                 .equ	GPIOR15	= 5 ; General Purpose I/O Register 1 Bit 5
                                 .equ	GPIOR16	= 6 ; General Purpose I/O Register 1 Bit 6
                                 .equ	GPIOR17	= 7 ; General Purpose I/O Register 1 Bit 7
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0 ; General Purpose I/O Register 0 Bit 0
                                 .equ	GPIOR01	= 1 ; General Purpose I/O Register 0 Bit 1
                                 .equ	GPIOR02	= 2 ; General Purpose I/O Register 0 Bit 2
                                 .equ	GPIOR03	= 3 ; General Purpose I/O Register 0 Bit 3
                                 .equ	GPIOR04	= 4 ; General Purpose I/O Register 0 Bit 4
                                 .equ	GPIOR05	= 5 ; General Purpose I/O Register 0 Bit 5
                                 .equ	GPIOR06	= 6 ; General Purpose I/O Register 0 Bit 6
                                 .equ	GPIOR07	= 7 ; General Purpose I/O Register 0 Bit 7
                                 
                                 
                                 ; ***** EEPROM *****************
                                 ; EEAR - EEPROM Address Register Bytes
                                 .equ	EEARH0	= 0 ; EEPROM Address Register Bytes High Bit 8
                                 .equ	EEARH1	= 1 ; EEPROM Address Register Bytes High Bit 9
                                 
                                 .equ	EEARL0	= 0 ; EEPROM Address Register Bytes Low Bit 0
                                 .equ	EEARL1	= 1 ; EEPROM Address Register Bytes Low Bit 1
                                 .equ	EEARL2	= 2 ; EEPROM Address Register Bytes Low Bit 2
                                 .equ	EEARL3	= 3 ; EEPROM Address Register Bytes Low Bit 3
                                 .equ	EEARL4	= 4 ; EEPROM Address Register Bytes Low Bit 4
                                 .equ	EEARL5	= 5 ; EEPROM Address Register Bytes Low Bit 5
                                 .equ	EEARL6	= 6 ; EEPROM Address Register Bytes Low Bit 6
                                 .equ	EEARL7	= 7 ; EEPROM Address Register Bytes Low Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0 ; EEPROM Data Register Bit 0
                                 .equ	EEDR1	= 1 ; EEPROM Data Register Bit 1
                                 .equ	EEDR2	= 2 ; EEPROM Data Register Bit 2
                                 .equ	EEDR3	= 3 ; EEPROM Data Register Bit 3
                                 .equ	EEDR4	= 4 ; EEPROM Data Register Bit 4
                                 .equ	EEDR5	= 5 ; EEPROM Data Register Bit 5
                                 .equ	EEDR6	= 6 ; EEPROM Data Register Bit 6
                                 .equ	EEDR7	= 7 ; EEPROM Data Register Bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0 ; EEPROM Read Enable
                                 .equ	EEPE	= 1 ; EEPROM Write Enable
                                 .equ	EEMPE	= 2 ; EEPROM Master Write Enable
                                 .equ	EERIE	= 3 ; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4 ; EEPROM Programming Mode Bits
                                 .equ	EEPM1	= 5 ; EEPROM Programming Mode Bits
                                 
                                 
                                 ; ***** FUSE *****************
                                 ; EXTENDED - 
                                 .equ	BODLEVEL0	= 0 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2 ; Brown-out Detector trigger level
                                 .equ	CFD	= 3 ; Clock Failure Detection
                                 
                                 ; HIGH - 
                                 .equ	BOOTRST	= 0 ; Boot Reset vector Enabled
                                 .equ	BOOTSZ0	= 1 ; Select boot size
                                 .equ	BOOTSZ1	= 2 ; Select boot size
                                 .equ	EESAVE	= 3 ; Preserve EEPROM through the Chip Erase cycle
                                 .equ	WDTON	= 4 ; Watch-dog Timer always on
                                 .equ	SPIEN	= 5 ; Serial program downloading (SPI) enabled
                                 .equ	DWEN	= 6 ; Debug Wire enable
                                 .equ	RSTDISBL	= 7 ; Reset Disabled (Enable PC6 as i/o pin)
                                 
                                 ; LOW - 
                                 .equ	SUT_CKSEL0	= 0 ; Select Clock Source
                                 .equ	SUT_CKSEL1	= 1 ; Select Clock Source
                                 .equ	SUT_CKSEL2	= 2 ; Select Clock Source
                                 .equ	SUT_CKSEL3	= 3 ; Select Clock Source
                                 .equ	SUT_CKSEL4	= 4 ; Select Clock Source
                                 .equ	SUT_CKSEL5	= 5 ; Select Clock Source
                                 .equ	CKOUT	= 6 ; Clock output on PORTB0
                                 .equ	CKDIV8	= 7 ; Divide clock by 8 internally
                                 
                                 
                                 ; ***** LOCKBIT *****************
                                 ; LOCKBIT - 
                                 .equ	LB1	= 0 ; Memory Lock
                                 .equ	LB2	= 1 ; Memory Lock
                                 .equ	BLB01	= 2 ; Boot Loader Protection Mode
                                 .equ	BLB02	= 3 ; Boot Loader Protection Mode
                                 .equ	BLB11	= 4 ; Boot Loader Protection Mode
                                 .equ	BLB12	= 5 ; Boot Loader Protection Mode
                                 
                                 
                                 ; ***** CFD *****************
                                 ; XFDCSR - XOSC Failure Detection Control and Status Register
                                 .equ	XFDIE	= 0 ; Failure Detection Interrupt Enable
                                 .equ	XFDIF	= 1 ; Failure Detection Interrupt Flag
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHSTART	= 0x0000 ; Note: Word address
                                 .equ	FLASHEND	= 0x3FFF ; Note: Word address
                                 .equ	FLASHPAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION1START	= 0x3F00 ; Note: Word address
                                 .equ	BOOTSECTION1END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION1PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION2START	= 0x3E00 ; Note: Word address
                                 .equ	BOOTSECTION2END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION2PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION3START	= 0x3C00 ; Note: Word address
                                 .equ	BOOTSECTION3END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION3PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION4START	= 0x3800 ; Note: Word address
                                 .equ	BOOTSECTION4END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION4PAGESIZE	= 0x0080 ;
                                 
                                 .equ	IOEND	= 0x00FF
                                 
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08FF
                                 
                                 .equ	E2END	= 0x03FF
                                 .equ	EEPROMEND	= 0x03FF
                                 .equ	EEADRBITS	= 10
                                 
                                 .equ	XRAMEND	= 0x0000
                                 
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	PAGESIZE	= 0x0080 ;
                                 
                                 .equ	FIRSTBOOTSTART	= 0x7E00 ; Note: Word address
                                 .equ	FIRSTBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FIRSTBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	SECONDBOOTSTART	= 0x7C00 ; Note: Word address
                                 .equ	SECONDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	SECONDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	THIRDBOOTSTART	= 0x7800 ; Note: Word address
                                 .equ	THIRDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	THIRDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	FOURTHBOOTSTART	= 0x7000 ; Note: Word address
                                 .equ	FOURTHBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FOURTHBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	 SMALLBOOTSTART	= FIRSTBOOTSTART ;
                                 .equ	 LARGEBOOTSTART	= FOURTHBOOTSTART ;
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	 = 0x0002 ; External Interrupt Request 0
                                 .equ	INT1addr	 = 0x0004 ; External Interrupt Request 1
                                 .equ	PCINT0addr	 = 0x0006 ; Pin Change Interrupt Request 0
                                 .equ	PCINT1addr	 = 0x0008 ; Pin Change Interrupt Request 1
                                 .equ	PCINT2addr	 = 0x000A ; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	 = 0x000C ; Watchdog Time-out Interrupt
                                 .equ	TIMER2_COMPAaddr	 = 0x000E ; Timer/Counter2 Compare Match A
                                 .equ	TIMER2_COMPBaddr	 = 0x0010 ; Timer/Counter2 Compare Match B
                                 .equ	TIMER2_OVFaddr	 = 0x0012 ; Timer/Counter2 Overflow
                                 .equ	TIMER1_CAPTaddr	 = 0x0014 ; Timer/Counter1 Capture Event
                                 .equ	TIMER1_COMPAaddr	 = 0x0016 ; Timer/Counter1 Compare Match A
                                 .equ	TIMER1_COMPBaddr	 = 0x0018 ; Timer/Counter1 Compare Match B
                                 .equ	TIMER1_OVFaddr	 = 0x001A ; Timer/Counter1 Overflow
                                 .equ	TIMER0_COMPAaddr	 = 0x001C ; TimerCounter0 Compare Match A
                                 .equ	TIMER0_COMPBaddr	 = 0x001E ; TimerCounter0 Compare Match B
                                 .equ	TIMER0_OVFaddr	 = 0x0020 ; Timer/Couner0 Overflow
                                 .equ	SPI0_STCaddr	 = 0x0022 ; SPI Serial Transfer Complete
                                 .equ	USART0_RXaddr	 = 0x0024 ; USART0 Rx Complete
                                 .equ	USART0_UDREaddr	 = 0x0026 ; USART0, Data Register Empty
                                 .equ	USART0_TXaddr	 = 0x0028 ; USART0 Tx Complete
                                 .equ	ADCaddr	 = 0x002A ; ADC Conversion Complete
                                 .equ	EE_READYaddr	 = 0x002C ; EEPROM Ready
                                 .equ	ANALOG_COMPaddr	 = 0x002E ; Analog Comparator
                                 .equ	TWI0addr	 = 0x0030 ; Two-wire Serial Interface
                                 .equ	SPM_Readyaddr	 = 0x0032 ; Store Program Memory Read
                                 .equ	USART0_STARTaddr	 = 0x0034 ; USART0 Start frame detection
                                 .equ	PCINT3addr	 = 0x0036 ; Pin Change Interrupt Request 3
                                 .equ	USART1_RXaddr	 = 0x0038 ; USART1 Rx Complete
                                 .equ	USART1_UDREaddr	 = 0x003A ; USART1, Data Register Empty
                                 .equ	USART1_TXaddr	 = 0x003C ; USART1 Tx Complete
                                 .equ	USART1_STARTaddr	 = 0x003E ; USART1 Start frame detection
                                 .equ	TIMER3_CAPTaddr	 = 0x0040 ; Timer/Counter3 Capture Event
                                 .equ	TIMER3_COMPAaddr	 = 0x0042 ; Timer/Counter3 Compare Match A
                                 .equ	TIMER3_COMPBaddr	 = 0x0044 ; Timer/Counter3 Compare Match B
                                 .equ	TIMER3_OVFaddr	 = 0x0046 ; Timer/Counter3 Overflow
                                 .equ	CFDaddr	 = 0x0048 ; Clock failure detection interrupt
                                 .equ	PTC_EOCaddr	 = 0x004A ; PTC End of conversion
                                 .equ	PTC_WCOMPaddr	 = 0x004C ; PTC Window comparator mode
                                 .equ	SPI1_STCaddr	 = 0x004E ; SPI1 Serial Transfer Complete
                                 .equ	TWI1addr	 = 0x0050 ; TWI Transfer Complete
                                 .equ	TIMER4_CAPTaddr	 = 0x0052 ; Timer/Counter4 Capture Event
                                 .equ	TIMER4_COMPAaddr	 = 0x0054 ; Timer/Counter4 Compare Match A
                                 .equ	TIMER4_COMPBaddr	 = 0x0056 ; Timer/Counter4 Compare Match B
                                 .equ	TIMER4_OVFaddr	 = 0x0058 ; Timer/Counter4 Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 90 ; size in words
                                 
                                 #endif /* _M328PBDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 
                                 
                                 ; FINAL_PROJECT_Gupta.asm
                                 ;
                                 ; Created: 11/28/2018 2:35:38 PM
                                 ; Author : samri
                                 ;
                                 
                                 
                                 ; Replace with your application code
                                 .cseg 
                                 .org  0x0000
                                 .def reg_workhorse=r16
                                 .def reg_SPI_data=r17
                                 
                                 .macro        set_pointer
                                 	ldi                @0, low(@2<<1)
                                 	ldi                @1, high(@2<<1)
                                 .endmacro
                                 
000000 c0ff                      rjmp setup
                                 .org 0x0100 
                                 .def X_mov= r18
                                 .def Y_mov=r19 
                                 .def fun =r25
                                 .def mov_acc=r20
                                 .def mov_down=r21
                                 
                                 
                                 Setup: 
                                 			
000100 940e 0d70                 	call OLED_initialize
000102 940e 1207                 	call GFX_clear_array      ; Clear the memory
000104 e1e0
000105 e0f2                      	set_pointer ZL,ZH,pixel_array
000106 940e 0da1                 	call OLED_refresh_screen ; clear screen
                                 	
                                 
                                 loop:    
                                 	
000108 e0ea
000109 e2f1                      	set_pointer ZL,ZH, Char_177
00010a 940e 11f9                 	call GFX_set_shape
00010c 940e 11eb                 	call GFX_draw_shape
00010e e1a0
00010f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000110 e02a                      	ldi X_mov,10
000111 e030                      	ldi Y_mov,0
000112 940e 11c1                 	call GFX_set_array_pos
000114 940e 11f9                 	call GFX_set_shape
000116 e0ea
000117 e2f1                      	set_pointer ZL,ZH, Char_177
000118 940e 11eb                 	call GFX_draw_shape
00011a e1a0
00011b e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00011c e124                      	ldi X_mov,20
00011d e030                      	ldi Y_mov,0
00011e 940e 11c1                 	call GFX_set_array_pos
000120 940e 11f9                 	call GFX_set_shape
000122 e0ea
000123 e2f1                      	set_pointer ZL,ZH, Char_177
000124 940e 11eb                 	call GFX_draw_shape
000126 e1a0
000127 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000128 e12e                      	ldi X_mov,30
000129 e030                      	ldi Y_mov,0
00012a 940e 11c1                 	call GFX_set_array_pos
00012c 940e 11f9                 	call GFX_set_shape
00012e e0ea
00012f e2f1                      	set_pointer ZL,ZH, Char_177
000130 940e 11eb                 	call GFX_draw_shape
000132 e1a0
000133 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000134 e228                      	ldi X_mov,40
000135 e030                      	ldi Y_mov,0
000136 940e 11c1                 	call GFX_set_array_pos
000138 940e 11f9                 	call GFX_set_shape
00013a e0ea
00013b e2f1                      	set_pointer ZL,ZH, Char_177
00013c 940e 11eb                 	call GFX_draw_shape
00013e e1a0
00013f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000140 e322                      	ldi X_mov,50
000141 e030                      	ldi Y_mov,0
000142 940e 11c1                 	call GFX_set_array_pos
000144 940e 11f9                 	call GFX_set_shape
000146 e0ea
000147 e2f1                      	set_pointer ZL,ZH, Char_177
000148 940e 11eb                 	call GFX_draw_shape
00014a e1a0
00014b e0b2                      	set_pointer XL,XH,pixel_array
                                 
00014c e32c                      	ldi X_mov,60
00014d e030                      	ldi Y_mov,0
00014e 940e 11c1                 	call GFX_set_array_pos
000150 940e 11f9                 	call GFX_set_shape
000152 e0ea
000153 e2f1                      	set_pointer ZL,ZH, Char_177
000154 940e 11eb                 	call GFX_draw_shape
000156 e1a0
000157 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000158 e426                      	ldi X_mov,70
000159 e030                      	ldi Y_mov,0
00015a 940e 11c1                 	call GFX_set_array_pos
00015c 940e 11f9                 	call GFX_set_shape
00015e e0ea
00015f e2f1                      	set_pointer ZL,ZH, Char_177
000160 940e 11eb                 	call GFX_draw_shape
000162 e1a0
000163 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000164 e520                      	ldi X_mov,80
000165 e030                      	ldi Y_mov,0
000166 940e 11c1                 	call GFX_set_array_pos
000168 940e 11f9                 	call GFX_set_shape
00016a e0ea
00016b e2f1                      	set_pointer ZL,ZH, Char_177
00016c 940e 11eb                 	call GFX_draw_shape
00016e e1a0
00016f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000170 e52a                      	ldi X_mov,90
000171 e030                      	ldi Y_mov,0
000172 940e 11c1                 	call GFX_set_array_pos
000174 940e 11f9                 	call GFX_set_shape
000176 e0ea
000177 e2f1                      	set_pointer ZL,ZH, Char_177
000178 940e 11eb                 	call GFX_draw_shape
00017a e1a0
00017b e0b2                      	set_pointer XL,XH,pixel_array
                                 
00017c e624                      	ldi X_mov,100
00017d e030                      	ldi Y_mov,0
00017e 940e 11c1                 	call GFX_set_array_pos
000180 940e 11f9                 	call GFX_set_shape
000182 e0ea
000183 e2f1                      	set_pointer ZL,ZH, Char_177
000184 940e 11eb                 	call GFX_draw_shape
000186 e1a0
000187 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000188 e62e                      	ldi X_mov,110
000189 e030                      	ldi Y_mov,0
00018a 940e 11c1                 	call GFX_set_array_pos
00018c 940e 11f9                 	call GFX_set_shape
00018e e0ea
00018f e2f1                      	set_pointer ZL,ZH, Char_177
000190 940e 11eb                 	call GFX_draw_shape
000192 e1a0
000193 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000194 e728                      	ldi X_mov,120
000195 e030                      	ldi Y_mov,0
000196 940e 11c1                 	call GFX_set_array_pos
000198 940e 11f9                 	call GFX_set_shape
00019a e0ea
00019b e2f1                      	set_pointer ZL,ZH, Char_177
00019c 940e 11eb                 	call GFX_draw_shape
00019e e1a0
00019f e0b2                      	set_pointer XL,XH,pixel_array
                                 
0001a0 940e 0da1                 	call OLED_refresh_screen
0001a2 940e 0d1e                 	call delay_1s
0001a4 c000                      	rjmp loop2
                                 
                                 loop2:
                                 	
0001a5 940e 1207                 	call GFX_clear_array
0001a7 e020                      	ldi X_mov,0
0001a8 e03a                      	ldi Y_mov,10
0001a9 940e 11c1                 	call GFX_set_array_pos
0001ab 940e 11f9                 	call GFX_set_shape
0001ad e0ea
0001ae e2f1                      	set_pointer ZL,ZH, Char_177
0001af 940e 11eb                 	call GFX_draw_shape
0001b1 e1a0
0001b2 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0001b3 e02a                      	ldi X_mov,10
0001b4 e030                      	ldi Y_mov,0
0001b5 940e 11c1                 	call GFX_set_array_pos
0001b7 940e 11f9                 	call GFX_set_shape
0001b9 e0ea
0001ba e2f1                      	set_pointer ZL,ZH, Char_177
0001bb 940e 11eb                 	call GFX_draw_shape
0001bd e1a0
0001be e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0001bf e124                      	ldi X_mov,20
0001c0 e030                      	ldi Y_mov,0
0001c1 940e 11c1                 	call GFX_set_array_pos
0001c3 940e 11f9                 	call GFX_set_shape
0001c5 e0ea
0001c6 e2f1                      	set_pointer ZL,ZH, Char_177
0001c7 940e 11eb                 	call GFX_draw_shape
0001c9 e1a0
0001ca e0b2                      	set_pointer XL,XH,pixel_array
                                 
0001cb e12e                      	ldi X_mov,30
0001cc e030                      	ldi Y_mov,0
0001cd 940e 11c1                 	call GFX_set_array_pos
0001cf 940e 11f9                 	call GFX_set_shape
0001d1 e0ea
0001d2 e2f1                      	set_pointer ZL,ZH, Char_177
0001d3 940e 11eb                 	call GFX_draw_shape
0001d5 e1a0
0001d6 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0001d7 e228                      	ldi X_mov,40
0001d8 e030                      	ldi Y_mov,0
0001d9 940e 11c1                 	call GFX_set_array_pos
0001db 940e 11f9                 	call GFX_set_shape
0001dd e0ea
0001de e2f1                      	set_pointer ZL,ZH, Char_177
0001df 940e 11eb                 	call GFX_draw_shape
0001e1 e1a0
0001e2 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0001e3 e322                      	ldi X_mov,50
0001e4 e030                      	ldi Y_mov,0
0001e5 940e 11c1                 	call GFX_set_array_pos
0001e7 940e 11f9                 	call GFX_set_shape
0001e9 e0ea
0001ea e2f1                      	set_pointer ZL,ZH, Char_177
0001eb 940e 11eb                 	call GFX_draw_shape
0001ed e1a0
0001ee e0b2                      	set_pointer XL,XH,pixel_array
                                 
0001ef e32c                      	ldi X_mov,60
0001f0 e030                      	ldi Y_mov,0
0001f1 940e 11c1                 	call GFX_set_array_pos
0001f3 940e 11f9                 	call GFX_set_shape
0001f5 e0ea
0001f6 e2f1                      	set_pointer ZL,ZH, Char_177
0001f7 940e 11eb                 	call GFX_draw_shape
0001f9 e1a0
0001fa e0b2                      	set_pointer XL,XH,pixel_array
                                 
0001fb e426                      	ldi X_mov,70
0001fc e030                      	ldi Y_mov,0
0001fd 940e 11c1                 	call GFX_set_array_pos
0001ff 940e 11f9                 	call GFX_set_shape
000201 e0ea
000202 e2f1                      	set_pointer ZL,ZH, Char_177
000203 940e 11eb                 	call GFX_draw_shape
000205 e1a0
000206 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000207 e520                      	ldi X_mov,80
000208 e030                      	ldi Y_mov,0
000209 940e 11c1                 	call GFX_set_array_pos
00020b 940e 11f9                 	call GFX_set_shape
00020d e0ea
00020e e2f1                      	set_pointer ZL,ZH, Char_177
00020f 940e 11eb                 	call GFX_draw_shape
000211 e1a0
000212 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000213 e52a                      	ldi X_mov,90
000214 e030                      	ldi Y_mov,0
000215 940e 11c1                 	call GFX_set_array_pos
000217 940e 11f9                 	call GFX_set_shape
000219 e0ea
00021a e2f1                      	set_pointer ZL,ZH, Char_177
00021b 940e 11eb                 	call GFX_draw_shape
00021d e1a0
00021e e0b2                      	set_pointer XL,XH,pixel_array
                                 
00021f e624                      	ldi X_mov,100
000220 e030                      	ldi Y_mov,0
000221 940e 11c1                 	call GFX_set_array_pos
000223 940e 11f9                 	call GFX_set_shape
000225 e0ea
000226 e2f1                      	set_pointer ZL,ZH, Char_177
000227 940e 11eb                 	call GFX_draw_shape
000229 e1a0
00022a e0b2                      	set_pointer XL,XH,pixel_array
                                 
00022b e62e                      	ldi X_mov,110
00022c e030                      	ldi Y_mov,0
00022d 940e 11c1                 	call GFX_set_array_pos
00022f 940e 11f9                 	call GFX_set_shape
000231 e0ea
000232 e2f1                      	set_pointer ZL,ZH, Char_177
000233 940e 11eb                 	call GFX_draw_shape
000235 e1a0
000236 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000237 e728                      	ldi X_mov,120
000238 e030                      	ldi Y_mov,0
000239 940e 11c1                 	call GFX_set_array_pos
00023b 940e 11f9                 	call GFX_set_shape
00023d e0ea
00023e e2f1                      	set_pointer ZL,ZH, Char_177
00023f 940e 11eb                 	call GFX_draw_shape
000241 e1a0
000242 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000243 940e 0da1                 	call OLED_refresh_screen
000245 940e 0d1e                 	call delay_1s
000247 c000                      	rjmp loop3
                                 
                                 loop3:
000248 940e 1207                 	call GFX_clear_array
00024a e020                      	ldi X_mov,0
00024b e134                      	ldi Y_mov,20
00024c 940e 11c1                 	call GFX_set_array_pos
00024e 940e 11f9                 	call GFX_set_shape
000250 e0ea
000251 e2f1                      	set_pointer ZL,ZH, Char_177
000252 940e 11eb                 	call GFX_draw_shape
000254 e1a0
000255 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000256 e02a                      	ldi X_mov,10
000257 e03a                      	ldi Y_mov,10
000258 940e 11c1                 	call GFX_set_array_pos
00025a 940e 11f9                 	call GFX_set_shape
00025c e0ea
00025d e2f1                      	set_pointer ZL,ZH, Char_177
00025e 940e 11eb                 	call GFX_draw_shape
000260 e1a0
000261 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000262 e124                      	ldi X_mov,20
000263 e030                      	ldi Y_mov,0
000264 940e 11c1                 	call GFX_set_array_pos
000266 940e 11f9                 	call GFX_set_shape
000268 e0ea
000269 e2f1                      	set_pointer ZL,ZH, Char_177
00026a 940e 11eb                 	call GFX_draw_shape
00026c e1a0
00026d e0b2                      	set_pointer XL,XH,pixel_array
                                 
00026e e12e                      	ldi X_mov,30
00026f e030                      	ldi Y_mov,0
000270 940e 11c1                 	call GFX_set_array_pos
000272 940e 11f9                 	call GFX_set_shape
000274 e0ea
000275 e2f1                      	set_pointer ZL,ZH, Char_177
000276 940e 11eb                 	call GFX_draw_shape
000278 e1a0
000279 e0b2                      	set_pointer XL,XH,pixel_array
                                 
00027a e228                      	ldi X_mov,40
00027b e030                      	ldi Y_mov,0
00027c 940e 11c1                 	call GFX_set_array_pos
00027e 940e 11f9                 	call GFX_set_shape
000280 e0ea
000281 e2f1                      	set_pointer ZL,ZH, Char_177
000282 940e 11eb                 	call GFX_draw_shape
000284 e1a0
000285 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000286 e322                      	ldi X_mov,50
000287 e030                      	ldi Y_mov,0
000288 940e 11c1                 	call GFX_set_array_pos
00028a 940e 11f9                 	call GFX_set_shape
00028c e0ea
00028d e2f1                      	set_pointer ZL,ZH, Char_177
00028e 940e 11eb                 	call GFX_draw_shape
000290 e1a0
000291 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000292 e32c                      	ldi X_mov,60
000293 e030                      	ldi Y_mov,0
000294 940e 11c1                 	call GFX_set_array_pos
000296 940e 11f9                 	call GFX_set_shape
000298 e0ea
000299 e2f1                      	set_pointer ZL,ZH, Char_177
00029a 940e 11eb                 	call GFX_draw_shape
00029c e1a0
00029d e0b2                      	set_pointer XL,XH,pixel_array
                                 
00029e e426                      	ldi X_mov,70
00029f e030                      	ldi Y_mov,0
0002a0 940e 11c1                 	call GFX_set_array_pos
0002a2 940e 11f9                 	call GFX_set_shape
0002a4 e0ea
0002a5 e2f1                      	set_pointer ZL,ZH, Char_177
0002a6 940e 11eb                 	call GFX_draw_shape
0002a8 e1a0
0002a9 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0002aa e520                      	ldi X_mov,80
0002ab e030                      	ldi Y_mov,0
0002ac 940e 11c1                 	call GFX_set_array_pos
0002ae 940e 11f9                 	call GFX_set_shape
0002b0 e0ea
0002b1 e2f1                      	set_pointer ZL,ZH, Char_177
0002b2 940e 11eb                 	call GFX_draw_shape
0002b4 e1a0
0002b5 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0002b6 e52a                      	ldi X_mov,90
0002b7 e030                      	ldi Y_mov,0
0002b8 940e 11c1                 	call GFX_set_array_pos
0002ba 940e 11f9                 	call GFX_set_shape
0002bc e0ea
0002bd e2f1                      	set_pointer ZL,ZH, Char_177
0002be 940e 11eb                 	call GFX_draw_shape
0002c0 e1a0
0002c1 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0002c2 e624                      	ldi X_mov,100
0002c3 e030                      	ldi Y_mov,0
0002c4 940e 11c1                 	call GFX_set_array_pos
0002c6 940e 11f9                 	call GFX_set_shape
0002c8 e0ea
0002c9 e2f1                      	set_pointer ZL,ZH, Char_177
0002ca 940e 11eb                 	call GFX_draw_shape
0002cc e1a0
0002cd e0b2                      	set_pointer XL,XH,pixel_array
                                 
0002ce e62e                      	ldi X_mov,110
0002cf e030                      	ldi Y_mov,0
0002d0 940e 11c1                 	call GFX_set_array_pos
0002d2 940e 11f9                 	call GFX_set_shape
0002d4 e0ea
0002d5 e2f1                      	set_pointer ZL,ZH, Char_177
0002d6 940e 11eb                 	call GFX_draw_shape
0002d8 e1a0
0002d9 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0002da e728                      	ldi X_mov,120
0002db e030                      	ldi Y_mov,0
0002dc 940e 11c1                 	call GFX_set_array_pos
0002de 940e 11f9                 	call GFX_set_shape
0002e0 e0ea
0002e1 e2f1                      	set_pointer ZL,ZH, Char_177
0002e2 940e 11eb                 	call GFX_draw_shape
0002e4 e1a0
0002e5 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0002e6 940e 0da1                 	call OLED_refresh_screen
0002e8 940e 0d1e                 	call delay_1s
0002ea c000                      	rjmp loop4
                                 
                                 loop4:
0002eb 940e 1207                 	call GFX_clear_array
0002ed e020                      	ldi X_mov,0
0002ee e13e                      	ldi Y_mov,30
0002ef 940e 11c1                 	call GFX_set_array_pos
0002f1 940e 11f9                 	call GFX_set_shape
0002f3 e0ea
0002f4 e2f1                      	set_pointer ZL,ZH, Char_177
0002f5 940e 11eb                 	call GFX_draw_shape
0002f7 e1a0
0002f8 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0002f9 e02a                      	ldi X_mov,10
0002fa e134                      	ldi Y_mov,20
0002fb 940e 11c1                 	call GFX_set_array_pos
0002fd 940e 11f9                 	call GFX_set_shape
0002ff e0ea
000300 e2f1                      	set_pointer ZL,ZH, Char_177
000301 940e 11eb                 	call GFX_draw_shape
000303 e1a0
000304 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000305 e124                      	ldi X_mov,20
000306 e03a                      	ldi Y_mov,10
000307 940e 11c1                 	call GFX_set_array_pos
000309 940e 11f9                 	call GFX_set_shape
00030b e0ea
00030c e2f1                      	set_pointer ZL,ZH, Char_177
00030d 940e 11eb                 	call GFX_draw_shape
00030f e1a0
000310 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000311 e12e                      	ldi X_mov,30
000312 e030                      	ldi Y_mov,0
000313 940e 11c1                 	call GFX_set_array_pos
000315 940e 11f9                 	call GFX_set_shape
000317 e0ea
000318 e2f1                      	set_pointer ZL,ZH, Char_177
000319 940e 11eb                 	call GFX_draw_shape
00031b e1a0
00031c e0b2                      	set_pointer XL,XH,pixel_array
                                 
00031d e228                      	ldi X_mov,40
00031e e030                      	ldi Y_mov,0
00031f 940e 11c1                 	call GFX_set_array_pos
000321 940e 11f9                 	call GFX_set_shape
000323 e0ea
000324 e2f1                      	set_pointer ZL,ZH, Char_177
000325 940e 11eb                 	call GFX_draw_shape
000327 e1a0
000328 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000329 e322                      	ldi X_mov,50
00032a e030                      	ldi Y_mov,0
00032b 940e 11c1                 	call GFX_set_array_pos
00032d 940e 11f9                 	call GFX_set_shape
00032f e0ea
000330 e2f1                      	set_pointer ZL,ZH, Char_177
000331 940e 11eb                 	call GFX_draw_shape
000333 e1a0
000334 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000335 e32c                      	ldi X_mov,60
000336 e030                      	ldi Y_mov,0
000337 940e 11c1                 	call GFX_set_array_pos
000339 940e 11f9                 	call GFX_set_shape
00033b e0ea
00033c e2f1                      	set_pointer ZL,ZH, Char_177
00033d 940e 11eb                 	call GFX_draw_shape
00033f e1a0
000340 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000341 e426                      	ldi X_mov,70
000342 e030                      	ldi Y_mov,0
000343 940e 11c1                 	call GFX_set_array_pos
000345 940e 11f9                 	call GFX_set_shape
000347 e0ea
000348 e2f1                      	set_pointer ZL,ZH, Char_177
000349 940e 11eb                 	call GFX_draw_shape
00034b e1a0
00034c e0b2                      	set_pointer XL,XH,pixel_array
                                 
00034d e520                      	ldi X_mov,80
00034e e030                      	ldi Y_mov,0
00034f 940e 11c1                 	call GFX_set_array_pos
000351 940e 11f9                 	call GFX_set_shape
000353 e0ea
000354 e2f1                      	set_pointer ZL,ZH, Char_177
000355 940e 11eb                 	call GFX_draw_shape
000357 e1a0
000358 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000359 e52a                      	ldi X_mov,90
00035a e030                      	ldi Y_mov,0
00035b 940e 11c1                 	call GFX_set_array_pos
00035d 940e 11f9                 	call GFX_set_shape
00035f e0ea
000360 e2f1                      	set_pointer ZL,ZH, Char_177
000361 940e 11eb                 	call GFX_draw_shape
000363 e1a0
000364 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000365 e624                      	ldi X_mov,100
000366 e030                      	ldi Y_mov,0
000367 940e 11c1                 	call GFX_set_array_pos
000369 940e 11f9                 	call GFX_set_shape
00036b e0ea
00036c e2f1                      	set_pointer ZL,ZH, Char_177
00036d 940e 11eb                 	call GFX_draw_shape
00036f e1a0
000370 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000371 e62e                      	ldi X_mov,110
000372 e030                      	ldi Y_mov,0
000373 940e 11c1                 	call GFX_set_array_pos
000375 940e 11f9                 	call GFX_set_shape
000377 e0ea
000378 e2f1                      	set_pointer ZL,ZH, Char_177
000379 940e 11eb                 	call GFX_draw_shape
00037b e1a0
00037c e0b2                      	set_pointer XL,XH,pixel_array
                                 
00037d e728                      	ldi X_mov,120
00037e e030                      	ldi Y_mov,0
00037f 940e 11c1                 	call GFX_set_array_pos
000381 940e 11f9                 	call GFX_set_shape
000383 e0ea
000384 e2f1                      	set_pointer ZL,ZH, Char_177
000385 940e 11eb                 	call GFX_draw_shape
000387 e1a0
000388 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000389 940e 0da1                 	call OLED_refresh_screen
00038b 940e 0d1e                 	call delay_1s
00038d c000                      	rjmp loop5
                                 
                                 
                                 loop5:
00038e 940e 1207                 	call GFX_clear_array
000390 e020                      	ldi X_mov,0
000391 e238                      	ldi Y_mov,40
000392 940e 11c1                 	call GFX_set_array_pos
000394 940e 11f9                 	call GFX_set_shape
000396 e0ea
000397 e2f1                      	set_pointer ZL,ZH, Char_177
000398 940e 11eb                 	call GFX_draw_shape
00039a e1a0
00039b e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00039c e02a                      	ldi X_mov,10
00039d e13e                      	ldi Y_mov,30
00039e 940e 11c1                 	call GFX_set_array_pos
0003a0 940e 11f9                 	call GFX_set_shape
0003a2 e0ea
0003a3 e2f1                      	set_pointer ZL,ZH, Char_177
0003a4 940e 11eb                 	call GFX_draw_shape
0003a6 e1a0
0003a7 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0003a8 e124                      	ldi X_mov,20
0003a9 e134                      	ldi Y_mov,20
0003aa 940e 11c1                 	call GFX_set_array_pos
0003ac 940e 11f9                 	call GFX_set_shape
0003ae e0ea
0003af e2f1                      	set_pointer ZL,ZH, Char_177
0003b0 940e 11eb                 	call GFX_draw_shape
0003b2 e1a0
0003b3 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0003b4 e12e                      	ldi X_mov,30
0003b5 e03a                      	ldi Y_mov,10
0003b6 940e 11c1                 	call GFX_set_array_pos
0003b8 940e 11f9                 	call GFX_set_shape
0003ba e0ea
0003bb e2f1                      	set_pointer ZL,ZH, Char_177
0003bc 940e 11eb                 	call GFX_draw_shape
0003be e1a0
0003bf e0b2                      	set_pointer XL,XH,pixel_array
                                 
0003c0 e228                      	ldi X_mov,40
0003c1 e030                      	ldi Y_mov,0
0003c2 940e 11c1                 	call GFX_set_array_pos
0003c4 940e 11f9                 	call GFX_set_shape
0003c6 e0ea
0003c7 e2f1                      	set_pointer ZL,ZH, Char_177
0003c8 940e 11eb                 	call GFX_draw_shape
0003ca e1a0
0003cb e0b2                      	set_pointer XL,XH,pixel_array
                                 
0003cc e322                      	ldi X_mov,50
0003cd e030                      	ldi Y_mov,0
0003ce 940e 11c1                 	call GFX_set_array_pos
0003d0 940e 11f9                 	call GFX_set_shape
0003d2 e0ea
0003d3 e2f1                      	set_pointer ZL,ZH, Char_177
0003d4 940e 11eb                 	call GFX_draw_shape
0003d6 e1a0
0003d7 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0003d8 e32c                      	ldi X_mov,60
0003d9 e030                      	ldi Y_mov,0
0003da 940e 11c1                 	call GFX_set_array_pos
0003dc 940e 11f9                 	call GFX_set_shape
0003de e0ea
0003df e2f1                      	set_pointer ZL,ZH, Char_177
0003e0 940e 11eb                 	call GFX_draw_shape
0003e2 e1a0
0003e3 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0003e4 e426                      	ldi X_mov,70
0003e5 e030                      	ldi Y_mov,0
0003e6 940e 11c1                 	call GFX_set_array_pos
0003e8 940e 11f9                 	call GFX_set_shape
0003ea e0ea
0003eb e2f1                      	set_pointer ZL,ZH, Char_177
0003ec 940e 11eb                 	call GFX_draw_shape
0003ee e1a0
0003ef e0b2                      	set_pointer XL,XH,pixel_array
                                 
0003f0 e520                      	ldi X_mov,80
0003f1 e030                      	ldi Y_mov,0
0003f2 940e 11c1                 	call GFX_set_array_pos
0003f4 940e 11f9                 	call GFX_set_shape
0003f6 e0ea
0003f7 e2f1                      	set_pointer ZL,ZH, Char_177
0003f8 940e 11eb                 	call GFX_draw_shape
0003fa e1a0
0003fb e0b2                      	set_pointer XL,XH,pixel_array
                                 
0003fc e52a                      	ldi X_mov,90
0003fd e030                      	ldi Y_mov,0
0003fe 940e 11c1                 	call GFX_set_array_pos
000400 940e 11f9                 	call GFX_set_shape
000402 e0ea
000403 e2f1                      	set_pointer ZL,ZH, Char_177
000404 940e 11eb                 	call GFX_draw_shape
000406 e1a0
000407 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000408 e624                      	ldi X_mov,100
000409 e030                      	ldi Y_mov,0
00040a 940e 11c1                 	call GFX_set_array_pos
00040c 940e 11f9                 	call GFX_set_shape
00040e e0ea
00040f e2f1                      	set_pointer ZL,ZH, Char_177
000410 940e 11eb                 	call GFX_draw_shape
000412 e1a0
000413 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000414 e62e                      	ldi X_mov,110
000415 e030                      	ldi Y_mov,0
000416 940e 11c1                 	call GFX_set_array_pos
000418 940e 11f9                 	call GFX_set_shape
00041a e0ea
00041b e2f1                      	set_pointer ZL,ZH, Char_177
00041c 940e 11eb                 	call GFX_draw_shape
00041e e1a0
00041f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000420 e728                      	ldi X_mov,120
000421 e030                      	ldi Y_mov,0
000422 940e 11c1                 	call GFX_set_array_pos
000424 940e 11f9                 	call GFX_set_shape
000426 e0ea
000427 e2f1                      	set_pointer ZL,ZH, Char_177
000428 940e 11eb                 	call GFX_draw_shape
00042a e1a0
00042b e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00042c 940e 0da1                 	call OLED_refresh_screen
00042e 940e 0d1e                 	call delay_1s
000430 c000                      	rjmp loop6
                                 
                                 loop6:
000431 940e 1207                 	call GFX_clear_array
000433 e020                      	ldi X_mov,0
000434 e332                      	ldi Y_mov,50
000435 940e 11c1                 	call GFX_set_array_pos
000437 940e 11f9                 	call GFX_set_shape
000439 e0ea
00043a e2f1                      	set_pointer ZL,ZH, Char_177
00043b 940e 11eb                 	call GFX_draw_shape
00043d e1a0
00043e e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00043f e02a                      	ldi X_mov,10
000440 e238                      	ldi Y_mov,40
000441 940e 11c1                 	call GFX_set_array_pos
000443 940e 11f9                 	call GFX_set_shape
000445 e0ea
000446 e2f1                      	set_pointer ZL,ZH, Char_177
000447 940e 11eb                 	call GFX_draw_shape
000449 e1a0
00044a e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00044b e124                      	ldi X_mov,20
00044c e13e                      	ldi Y_mov,30
00044d 940e 11c1                 	call GFX_set_array_pos
00044f 940e 11f9                 	call GFX_set_shape
000451 e0ea
000452 e2f1                      	set_pointer ZL,ZH, Char_177
000453 940e 11eb                 	call GFX_draw_shape
000455 e1a0
000456 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000457 e12e                      	ldi X_mov,30
000458 e134                      	ldi Y_mov,20
000459 940e 11c1                 	call GFX_set_array_pos
00045b 940e 11f9                 	call GFX_set_shape
00045d e0ea
00045e e2f1                      	set_pointer ZL,ZH, Char_177
00045f 940e 11eb                 	call GFX_draw_shape
000461 e1a0
000462 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000463 e228                      	ldi X_mov,40
000464 e03a                      	ldi Y_mov,10
000465 940e 11c1                 	call GFX_set_array_pos
000467 940e 11f9                 	call GFX_set_shape
000469 e0ea
00046a e2f1                      	set_pointer ZL,ZH, Char_177
00046b 940e 11eb                 	call GFX_draw_shape
00046d e1a0
00046e e0b2                      	set_pointer XL,XH,pixel_array
                                 
00046f e322                      	ldi X_mov,50
000470 e030                      	ldi Y_mov,0
000471 940e 11c1                 	call GFX_set_array_pos
000473 940e 11f9                 	call GFX_set_shape
000475 e0ea
000476 e2f1                      	set_pointer ZL,ZH, Char_177
000477 940e 11eb                 	call GFX_draw_shape
000479 e1a0
00047a e0b2                      	set_pointer XL,XH,pixel_array
                                 
00047b e32c                      	ldi X_mov,60
00047c e030                      	ldi Y_mov,0
00047d 940e 11c1                 	call GFX_set_array_pos
00047f 940e 11f9                 	call GFX_set_shape
000481 e0ea
000482 e2f1                      	set_pointer ZL,ZH, Char_177
000483 940e 11eb                 	call GFX_draw_shape
000485 e1a0
000486 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000487 e426                      	ldi X_mov,70
000488 e030                      	ldi Y_mov,0
000489 940e 11c1                 	call GFX_set_array_pos
00048b 940e 11f9                 	call GFX_set_shape
00048d e0ea
00048e e2f1                      	set_pointer ZL,ZH, Char_177
00048f 940e 11eb                 	call GFX_draw_shape
000491 e1a0
000492 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000493 e520                      	ldi X_mov,80
000494 e030                      	ldi Y_mov,0
000495 940e 11c1                 	call GFX_set_array_pos
000497 940e 11f9                 	call GFX_set_shape
000499 e0ea
00049a e2f1                      	set_pointer ZL,ZH, Char_177
00049b 940e 11eb                 	call GFX_draw_shape
00049d e1a0
00049e e0b2                      	set_pointer XL,XH,pixel_array
                                 
00049f e52a                      	ldi X_mov,90
0004a0 e030                      	ldi Y_mov,0
0004a1 940e 11c1                 	call GFX_set_array_pos
0004a3 940e 11f9                 	call GFX_set_shape
0004a5 e0ea
0004a6 e2f1                      	set_pointer ZL,ZH, Char_177
0004a7 940e 11eb                 	call GFX_draw_shape
0004a9 e1a0
0004aa e0b2                      	set_pointer XL,XH,pixel_array
                                 
0004ab e624                      	ldi X_mov,100
0004ac e030                      	ldi Y_mov,0
0004ad 940e 11c1                 	call GFX_set_array_pos
0004af 940e 11f9                 	call GFX_set_shape
0004b1 e0ea
0004b2 e2f1                      	set_pointer ZL,ZH, Char_177
0004b3 940e 11eb                 	call GFX_draw_shape
0004b5 e1a0
0004b6 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0004b7 e62e                      	ldi X_mov,110
0004b8 e030                      	ldi Y_mov,0
0004b9 940e 11c1                 	call GFX_set_array_pos
0004bb 940e 11f9                 	call GFX_set_shape
0004bd e0ea
0004be e2f1                      	set_pointer ZL,ZH, Char_177
0004bf 940e 11eb                 	call GFX_draw_shape
0004c1 e1a0
0004c2 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0004c3 e728                      	ldi X_mov,120
0004c4 e030                      	ldi Y_mov,0
0004c5 940e 11c1                 	call GFX_set_array_pos
0004c7 940e 11f9                 	call GFX_set_shape
0004c9 e0ea
0004ca e2f1                      	set_pointer ZL,ZH, Char_177
0004cb 940e 11eb                 	call GFX_draw_shape
0004cd e1a0
0004ce e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0004cf 940e 0da1                 	call OLED_refresh_screen
0004d1 940e 0d1e                 	call delay_1s
0004d3 c000                      	rjmp loop7
                                 
                                 loop7:
0004d4 940e 1207                 	call GFX_clear_array
0004d6 e020                      	ldi X_mov,0
0004d7 e33c                      	ldi Y_mov,60
0004d8 940e 11c1                 	call GFX_set_array_pos
0004da 940e 11f9                 	call GFX_set_shape
0004dc e0ea
0004dd e2f1                      	set_pointer ZL,ZH, Char_177
0004de 940e 11eb                 	call GFX_draw_shape
0004e0 e1a0
0004e1 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0004e2 e02a                      	ldi X_mov,10
0004e3 e332                      	ldi Y_mov,50
0004e4 940e 11c1                 	call GFX_set_array_pos
0004e6 940e 11f9                 	call GFX_set_shape
0004e8 e0ea
0004e9 e2f1                      	set_pointer ZL,ZH, Char_177
0004ea 940e 11eb                 	call GFX_draw_shape
0004ec e1a0
0004ed e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0004ee e124                      	ldi X_mov,20
0004ef e238                      	ldi Y_mov,40
0004f0 940e 11c1                 	call GFX_set_array_pos
0004f2 940e 11f9                 	call GFX_set_shape
0004f4 e0ea
0004f5 e2f1                      	set_pointer ZL,ZH, Char_177
0004f6 940e 11eb                 	call GFX_draw_shape
0004f8 e1a0
0004f9 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0004fa e12e                      	ldi X_mov,30
0004fb e13e                      	ldi Y_mov,30
0004fc 940e 11c1                 	call GFX_set_array_pos
0004fe 940e 11f9                 	call GFX_set_shape
000500 e0ea
000501 e2f1                      	set_pointer ZL,ZH, Char_177
000502 940e 11eb                 	call GFX_draw_shape
000504 e1a0
000505 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000506 e228                      	ldi X_mov,40
000507 e134                      	ldi Y_mov,20
000508 940e 11c1                 	call GFX_set_array_pos
00050a 940e 11f9                 	call GFX_set_shape
00050c e0ea
00050d e2f1                      	set_pointer ZL,ZH, Char_177
00050e 940e 11eb                 	call GFX_draw_shape
000510 e1a0
000511 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000512 e322                      	ldi X_mov,50
000513 e03a                      	ldi Y_mov,10
000514 940e 11c1                 	call GFX_set_array_pos
000516 940e 11f9                 	call GFX_set_shape
000518 e0ea
000519 e2f1                      	set_pointer ZL,ZH, Char_177
00051a 940e 11eb                 	call GFX_draw_shape
00051c e1a0
00051d e0b2                      	set_pointer XL,XH,pixel_array
                                 
00051e e32c                      	ldi X_mov,60
00051f e030                      	ldi Y_mov,0
000520 940e 11c1                 	call GFX_set_array_pos
000522 940e 11f9                 	call GFX_set_shape
000524 e0ea
000525 e2f1                      	set_pointer ZL,ZH, Char_177
000526 940e 11eb                 	call GFX_draw_shape
000528 e1a0
000529 e0b2                      	set_pointer XL,XH,pixel_array
                                 
00052a e426                      	ldi X_mov,70
00052b e030                      	ldi Y_mov,0
00052c 940e 11c1                 	call GFX_set_array_pos
00052e 940e 11f9                 	call GFX_set_shape
000530 e0ea
000531 e2f1                      	set_pointer ZL,ZH, Char_177
000532 940e 11eb                 	call GFX_draw_shape
000534 e1a0
000535 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000536 e520                      	ldi X_mov,80
000537 e030                      	ldi Y_mov,0
000538 940e 11c1                 	call GFX_set_array_pos
00053a 940e 11f9                 	call GFX_set_shape
00053c e0ea
00053d e2f1                      	set_pointer ZL,ZH, Char_177
00053e 940e 11eb                 	call GFX_draw_shape
000540 e1a0
000541 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000542 e52a                      	ldi X_mov,90
000543 e030                      	ldi Y_mov,0
000544 940e 11c1                 	call GFX_set_array_pos
000546 940e 11f9                 	call GFX_set_shape
000548 e0ea
000549 e2f1                      	set_pointer ZL,ZH, Char_177
00054a 940e 11eb                 	call GFX_draw_shape
00054c e1a0
00054d e0b2                      	set_pointer XL,XH,pixel_array
                                 
00054e e624                      	ldi X_mov,100
00054f e030                      	ldi Y_mov,0
000550 940e 11c1                 	call GFX_set_array_pos
000552 940e 11f9                 	call GFX_set_shape
000554 e0ea
000555 e2f1                      	set_pointer ZL,ZH, Char_177
000556 940e 11eb                 	call GFX_draw_shape
000558 e1a0
000559 e0b2                      	set_pointer XL,XH,pixel_array
                                 
00055a e62e                      	ldi X_mov,110
00055b e030                      	ldi Y_mov,0
00055c 940e 11c1                 	call GFX_set_array_pos
00055e 940e 11f9                 	call GFX_set_shape
000560 e0ea
000561 e2f1                      	set_pointer ZL,ZH, Char_177
000562 940e 11eb                 	call GFX_draw_shape
000564 e1a0
000565 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000566 e728                      	ldi X_mov,120
000567 e030                      	ldi Y_mov,0
000568 940e 11c1                 	call GFX_set_array_pos
00056a 940e 11f9                 	call GFX_set_shape
00056c e0ea
00056d e2f1                      	set_pointer ZL,ZH, Char_177
00056e 940e 11eb                 	call GFX_draw_shape
000570 e1a0
000571 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000572 940e 0da1                 	call OLED_refresh_screen
000574 940e 0d1e                 	call delay_1s
000576 c000                      	rjmp loop8
                                 
                                 loop8:
000577 940e 1207                 	call GFX_clear_array
000579 e020                      	ldi X_mov,0
00057a e33c                      	ldi Y_mov,60
00057b 940e 11c1                 	call GFX_set_array_pos
00057d 940e 11f9                 	call GFX_set_shape
00057f e0ea
000580 e2f1                      	set_pointer ZL,ZH, Char_177
000581 940e 11eb                 	call GFX_draw_shape
000583 e1a0
000584 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000585 e02a                      	ldi X_mov,10
000586 e33c                      	ldi Y_mov,60
000587 940e 11c1                 	call GFX_set_array_pos
000589 940e 11f9                 	call GFX_set_shape
00058b e0ea
00058c e2f1                      	set_pointer ZL,ZH, Char_177
00058d 940e 11eb                 	call GFX_draw_shape
00058f e1a0
000590 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000591 e124                      	ldi X_mov,20
000592 e332                      	ldi Y_mov,50
000593 940e 11c1                 	call GFX_set_array_pos
000595 940e 11f9                 	call GFX_set_shape
000597 e0ea
000598 e2f1                      	set_pointer ZL,ZH, Char_177
000599 940e 11eb                 	call GFX_draw_shape
00059b e1a0
00059c e0b2                      	set_pointer XL,XH,pixel_array
                                 
00059d e12e                      	ldi X_mov,30
00059e e238                      	ldi Y_mov,40
00059f 940e 11c1                 	call GFX_set_array_pos
0005a1 940e 11f9                 	call GFX_set_shape
0005a3 e0ea
0005a4 e2f1                      	set_pointer ZL,ZH, Char_177
0005a5 940e 11eb                 	call GFX_draw_shape
0005a7 e1a0
0005a8 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005a9 e228                      	ldi X_mov,40
0005aa e13e                      	ldi Y_mov,30
0005ab 940e 11c1                 	call GFX_set_array_pos
0005ad 940e 11f9                 	call GFX_set_shape
0005af e0ea
0005b0 e2f1                      	set_pointer ZL,ZH, Char_177
0005b1 940e 11eb                 	call GFX_draw_shape
0005b3 e1a0
0005b4 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005b5 e322                      	ldi X_mov,50
0005b6 e134                      	ldi Y_mov,20
0005b7 940e 11c1                 	call GFX_set_array_pos
0005b9 940e 11f9                 	call GFX_set_shape
0005bb e0ea
0005bc e2f1                      	set_pointer ZL,ZH, Char_177
0005bd 940e 11eb                 	call GFX_draw_shape
0005bf e1a0
0005c0 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005c1 e32c                      	ldi X_mov,60
0005c2 e03a                      	ldi Y_mov,10
0005c3 940e 11c1                 	call GFX_set_array_pos
0005c5 940e 11f9                 	call GFX_set_shape
0005c7 e0ea
0005c8 e2f1                      	set_pointer ZL,ZH, Char_177
0005c9 940e 11eb                 	call GFX_draw_shape
0005cb e1a0
0005cc e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005cd e426                      	ldi X_mov,70
0005ce e030                      	ldi Y_mov,0
0005cf 940e 11c1                 	call GFX_set_array_pos
0005d1 940e 11f9                 	call GFX_set_shape
0005d3 e0ea
0005d4 e2f1                      	set_pointer ZL,ZH, Char_177
0005d5 940e 11eb                 	call GFX_draw_shape
0005d7 e1a0
0005d8 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005d9 e520                      	ldi X_mov,80
0005da e030                      	ldi Y_mov,0
0005db 940e 11c1                 	call GFX_set_array_pos
0005dd 940e 11f9                 	call GFX_set_shape
0005df e0ea
0005e0 e2f1                      	set_pointer ZL,ZH, Char_177
0005e1 940e 11eb                 	call GFX_draw_shape
0005e3 e1a0
0005e4 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005e5 e52a                      	ldi X_mov,90
0005e6 e030                      	ldi Y_mov,0
0005e7 940e 11c1                 	call GFX_set_array_pos
0005e9 940e 11f9                 	call GFX_set_shape
0005eb e0ea
0005ec e2f1                      	set_pointer ZL,ZH, Char_177
0005ed 940e 11eb                 	call GFX_draw_shape
0005ef e1a0
0005f0 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005f1 e624                      	ldi X_mov,100
0005f2 e030                      	ldi Y_mov,0
0005f3 940e 11c1                 	call GFX_set_array_pos
0005f5 940e 11f9                 	call GFX_set_shape
0005f7 e0ea
0005f8 e2f1                      	set_pointer ZL,ZH, Char_177
0005f9 940e 11eb                 	call GFX_draw_shape
0005fb e1a0
0005fc e0b2                      	set_pointer XL,XH,pixel_array
                                 
0005fd e62e                      	ldi X_mov,110
0005fe e030                      	ldi Y_mov,0
0005ff 940e 11c1                 	call GFX_set_array_pos
000601 940e 11f9                 	call GFX_set_shape
000603 e0ea
000604 e2f1                      	set_pointer ZL,ZH, Char_177
000605 940e 11eb                 	call GFX_draw_shape
000607 e1a0
000608 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000609 e728                      	ldi X_mov,120
00060a e030                      	ldi Y_mov,0
00060b 940e 11c1                 	call GFX_set_array_pos
00060d 940e 11f9                 	call GFX_set_shape
00060f e0ea
000610 e2f1                      	set_pointer ZL,ZH, Char_177
000611 940e 11eb                 	call GFX_draw_shape
000613 e1a0
000614 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000615 940e 0da1                 	call OLED_refresh_screen
000617 940e 0d1e                 	call delay_1s
000619 c000                      	rjmp loop9
                                 
                                 loop9:
00061a 940e 1207                 	call GFX_clear_array
00061c e020                      	ldi X_mov,0
00061d e33c                      	ldi Y_mov,60
00061e 940e 11c1                 	call GFX_set_array_pos
000620 940e 11f9                 	call GFX_set_shape
000622 e0ea
000623 e2f1                      	set_pointer ZL,ZH, Char_177
000624 940e 11eb                 	call GFX_draw_shape
000626 e1a0
000627 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000628 e02a                      	ldi X_mov,10
000629 e33c                      	ldi Y_mov,60
00062a 940e 11c1                 	call GFX_set_array_pos
00062c 940e 11f9                 	call GFX_set_shape
00062e e0ea
00062f e2f1                      	set_pointer ZL,ZH, Char_177
000630 940e 11eb                 	call GFX_draw_shape
000632 e1a0
000633 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000634 e124                      	ldi X_mov,20
000635 e33c                      	ldi Y_mov,60
000636 940e 11c1                 	call GFX_set_array_pos
000638 940e 11f9                 	call GFX_set_shape
00063a e0ea
00063b e2f1                      	set_pointer ZL,ZH, Char_177
00063c 940e 11eb                 	call GFX_draw_shape
00063e e1a0
00063f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000640 e12e                      	ldi X_mov,30
000641 e332                      	ldi Y_mov,50
000642 940e 11c1                 	call GFX_set_array_pos
000644 940e 11f9                 	call GFX_set_shape
000646 e0ea
000647 e2f1                      	set_pointer ZL,ZH, Char_177
000648 940e 11eb                 	call GFX_draw_shape
00064a e1a0
00064b e0b2                      	set_pointer XL,XH,pixel_array
                                 
00064c e228                      	ldi X_mov,40
00064d e238                      	ldi Y_mov,40
00064e 940e 11c1                 	call GFX_set_array_pos
000650 940e 11f9                 	call GFX_set_shape
000652 e0ea
000653 e2f1                      	set_pointer ZL,ZH, Char_177
000654 940e 11eb                 	call GFX_draw_shape
000656 e1a0
000657 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000658 e322                      	ldi X_mov,50
000659 e13e                      	ldi Y_mov,30
00065a 940e 11c1                 	call GFX_set_array_pos
00065c 940e 11f9                 	call GFX_set_shape
00065e e0ea
00065f e2f1                      	set_pointer ZL,ZH, Char_177
000660 940e 11eb                 	call GFX_draw_shape
000662 e1a0
000663 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000664 e32c                      	ldi X_mov,60
000665 e134                      	ldi Y_mov,20
000666 940e 11c1                 	call GFX_set_array_pos
000668 940e 11f9                 	call GFX_set_shape
00066a e0ea
00066b e2f1                      	set_pointer ZL,ZH, Char_177
00066c 940e 11eb                 	call GFX_draw_shape
00066e e1a0
00066f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000670 e426                      	ldi X_mov,70
000671 e03a                      	ldi Y_mov,10
000672 940e 11c1                 	call GFX_set_array_pos
000674 940e 11f9                 	call GFX_set_shape
000676 e0ea
000677 e2f1                      	set_pointer ZL,ZH, Char_177
000678 940e 11eb                 	call GFX_draw_shape
00067a e1a0
00067b e0b2                      	set_pointer XL,XH,pixel_array
                                 
00067c e520                      	ldi X_mov,80
00067d e030                      	ldi Y_mov,0
00067e 940e 11c1                 	call GFX_set_array_pos
000680 940e 11f9                 	call GFX_set_shape
000682 e0ea
000683 e2f1                      	set_pointer ZL,ZH, Char_177
000684 940e 11eb                 	call GFX_draw_shape
000686 e1a0
000687 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000688 e52a                      	ldi X_mov,90
000689 e030                      	ldi Y_mov,0
00068a 940e 11c1                 	call GFX_set_array_pos
00068c 940e 11f9                 	call GFX_set_shape
00068e e0ea
00068f e2f1                      	set_pointer ZL,ZH, Char_177
000690 940e 11eb                 	call GFX_draw_shape
000692 e1a0
000693 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000694 e624                      	ldi X_mov,100
000695 e030                      	ldi Y_mov,0
000696 940e 11c1                 	call GFX_set_array_pos
000698 940e 11f9                 	call GFX_set_shape
00069a e0ea
00069b e2f1                      	set_pointer ZL,ZH, Char_177
00069c 940e 11eb                 	call GFX_draw_shape
00069e e1a0
00069f e0b2                      	set_pointer XL,XH,pixel_array
                                 
0006a0 e62e                      	ldi X_mov,110
0006a1 e030                      	ldi Y_mov,0
0006a2 940e 11c1                 	call GFX_set_array_pos
0006a4 940e 11f9                 	call GFX_set_shape
0006a6 e0ea
0006a7 e2f1                      	set_pointer ZL,ZH, Char_177
0006a8 940e 11eb                 	call GFX_draw_shape
0006aa e1a0
0006ab e0b2                      	set_pointer XL,XH,pixel_array
                                 
0006ac e728                      	ldi X_mov,120
0006ad e030                      	ldi Y_mov,0
0006ae 940e 11c1                 	call GFX_set_array_pos
0006b0 940e 11f9                 	call GFX_set_shape
0006b2 e0ea
0006b3 e2f1                      	set_pointer ZL,ZH, Char_177
0006b4 940e 11eb                 	call GFX_draw_shape
0006b6 e1a0
0006b7 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0006b8 940e 0da1                 	call OLED_refresh_screen
0006ba 940e 0d1e                 	call delay_1s
0006bc c000                      	rjmp loop10
                                 
                                 loop10:
0006bd 940e 1207                 	call GFX_clear_array
0006bf e020                      	ldi X_mov,0
0006c0 e33c                      	ldi Y_mov,60
0006c1 940e 11c1                 	call GFX_set_array_pos
0006c3 940e 11f9                 	call GFX_set_shape
0006c5 e0ea
0006c6 e2f1                      	set_pointer ZL,ZH, Char_177
0006c7 940e 11eb                 	call GFX_draw_shape
0006c9 e1a0
0006ca e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0006cb e02a                      	ldi X_mov,10
0006cc e33c                      	ldi Y_mov,60
0006cd 940e 11c1                 	call GFX_set_array_pos
0006cf 940e 11f9                 	call GFX_set_shape
0006d1 e0ea
0006d2 e2f1                      	set_pointer ZL,ZH, Char_177
0006d3 940e 11eb                 	call GFX_draw_shape
0006d5 e1a0
0006d6 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0006d7 e124                      	ldi X_mov,20
0006d8 e33c                      	ldi Y_mov,60
0006d9 940e 11c1                 	call GFX_set_array_pos
0006db 940e 11f9                 	call GFX_set_shape
0006dd e0ea
0006de e2f1                      	set_pointer ZL,ZH, Char_177
0006df 940e 11eb                 	call GFX_draw_shape
0006e1 e1a0
0006e2 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0006e3 e12e                      	ldi X_mov,30
0006e4 e33c                      	ldi Y_mov,60
0006e5 940e 11c1                 	call GFX_set_array_pos
0006e7 940e 11f9                 	call GFX_set_shape
0006e9 e0ea
0006ea e2f1                      	set_pointer ZL,ZH, Char_177
0006eb 940e 11eb                 	call GFX_draw_shape
0006ed e1a0
0006ee e0b2                      	set_pointer XL,XH,pixel_array
                                 
0006ef e228                      	ldi X_mov,40
0006f0 e332                      	ldi Y_mov,50
0006f1 940e 11c1                 	call GFX_set_array_pos
0006f3 940e 11f9                 	call GFX_set_shape
0006f5 e0ea
0006f6 e2f1                      	set_pointer ZL,ZH, Char_177
0006f7 940e 11eb                 	call GFX_draw_shape
0006f9 e1a0
0006fa e0b2                      	set_pointer XL,XH,pixel_array
                                 
0006fb e322                      	ldi X_mov,50
0006fc e238                      	ldi Y_mov,40
0006fd 940e 11c1                 	call GFX_set_array_pos
0006ff 940e 11f9                 	call GFX_set_shape
000701 e0ea
000702 e2f1                      	set_pointer ZL,ZH, Char_177
000703 940e 11eb                 	call GFX_draw_shape
000705 e1a0
000706 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000707 e32c                      	ldi X_mov,60
000708 e13e                      	ldi Y_mov,30
000709 940e 11c1                 	call GFX_set_array_pos
00070b 940e 11f9                 	call GFX_set_shape
00070d e0ea
00070e e2f1                      	set_pointer ZL,ZH, Char_177
00070f 940e 11eb                 	call GFX_draw_shape
000711 e1a0
000712 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000713 e426                      	ldi X_mov,70
000714 e134                      	ldi Y_mov,20
000715 940e 11c1                 	call GFX_set_array_pos
000717 940e 11f9                 	call GFX_set_shape
000719 e0ea
00071a e2f1                      	set_pointer ZL,ZH, Char_177
00071b 940e 11eb                 	call GFX_draw_shape
00071d e1a0
00071e e0b2                      	set_pointer XL,XH,pixel_array
                                 
00071f e520                      	ldi X_mov,80
000720 e03a                      	ldi Y_mov,10
000721 940e 11c1                 	call GFX_set_array_pos
000723 940e 11f9                 	call GFX_set_shape
000725 e0ea
000726 e2f1                      	set_pointer ZL,ZH, Char_177
000727 940e 11eb                 	call GFX_draw_shape
000729 e1a0
00072a e0b2                      	set_pointer XL,XH,pixel_array
                                 
00072b e52a                      	ldi X_mov,90
00072c e030                      	ldi Y_mov,0
00072d 940e 11c1                 	call GFX_set_array_pos
00072f 940e 11f9                 	call GFX_set_shape
000731 e0ea
000732 e2f1                      	set_pointer ZL,ZH, Char_177
000733 940e 11eb                 	call GFX_draw_shape
000735 e1a0
000736 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000737 e624                      	ldi X_mov,100
000738 e030                      	ldi Y_mov,0
000739 940e 11c1                 	call GFX_set_array_pos
00073b 940e 11f9                 	call GFX_set_shape
00073d e0ea
00073e e2f1                      	set_pointer ZL,ZH, Char_177
00073f 940e 11eb                 	call GFX_draw_shape
000741 e1a0
000742 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000743 e62e                      	ldi X_mov,110
000744 e030                      	ldi Y_mov,0
000745 940e 11c1                 	call GFX_set_array_pos
000747 940e 11f9                 	call GFX_set_shape
000749 e0ea
00074a e2f1                      	set_pointer ZL,ZH, Char_177
00074b 940e 11eb                 	call GFX_draw_shape
00074d e1a0
00074e e0b2                      	set_pointer XL,XH,pixel_array
                                 
00074f e728                      	ldi X_mov,120
000750 e030                      	ldi Y_mov,0
000751 940e 11c1                 	call GFX_set_array_pos
000753 940e 11f9                 	call GFX_set_shape
000755 e0ea
000756 e2f1                      	set_pointer ZL,ZH, Char_177
000757 940e 11eb                 	call GFX_draw_shape
000759 e1a0
00075a e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00075b 940e 0da1                 	call OLED_refresh_screen
00075d 940e 0d1e                 	call delay_1s
00075f c000                      	rjmp loop11
                                 
                                 loop11:
000760 940e 1207                 	call GFX_clear_array
000762 e020                      	ldi X_mov,0
000763 e33c                      	ldi Y_mov,60
000764 940e 11c1                 	call GFX_set_array_pos
000766 940e 11f9                 	call GFX_set_shape
000768 e0ea
000769 e2f1                      	set_pointer ZL,ZH, Char_177
00076a 940e 11eb                 	call GFX_draw_shape
00076c e1a0
00076d e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00076e e02a                      	ldi X_mov,10
00076f e33c                      	ldi Y_mov,60
000770 940e 11c1                 	call GFX_set_array_pos
000772 940e 11f9                 	call GFX_set_shape
000774 e0ea
000775 e2f1                      	set_pointer ZL,ZH, Char_177
000776 940e 11eb                 	call GFX_draw_shape
000778 e1a0
000779 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00077a e124                      	ldi X_mov,20
00077b e33c                      	ldi Y_mov,60
00077c 940e 11c1                 	call GFX_set_array_pos
00077e 940e 11f9                 	call GFX_set_shape
000780 e0ea
000781 e2f1                      	set_pointer ZL,ZH, Char_177
000782 940e 11eb                 	call GFX_draw_shape
000784 e1a0
000785 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000786 e12e                      	ldi X_mov,30
000787 e33c                      	ldi Y_mov,60
000788 940e 11c1                 	call GFX_set_array_pos
00078a 940e 11f9                 	call GFX_set_shape
00078c e0ea
00078d e2f1                      	set_pointer ZL,ZH, Char_177
00078e 940e 11eb                 	call GFX_draw_shape
000790 e1a0
000791 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000792 e228                      	ldi X_mov,40
000793 e33c                      	ldi Y_mov,60
000794 940e 11c1                 	call GFX_set_array_pos
000796 940e 11f9                 	call GFX_set_shape
000798 e0ea
000799 e2f1                      	set_pointer ZL,ZH, Char_177
00079a 940e 11eb                 	call GFX_draw_shape
00079c e1a0
00079d e0b2                      	set_pointer XL,XH,pixel_array
                                 
00079e e322                      	ldi X_mov,50
00079f e332                      	ldi Y_mov,50
0007a0 940e 11c1                 	call GFX_set_array_pos
0007a2 940e 11f9                 	call GFX_set_shape
0007a4 e0ea
0007a5 e2f1                      	set_pointer ZL,ZH, Char_177
0007a6 940e 11eb                 	call GFX_draw_shape
0007a8 e1a0
0007a9 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0007aa e32c                      	ldi X_mov,60
0007ab e238                      	ldi Y_mov,40
0007ac 940e 11c1                 	call GFX_set_array_pos
0007ae 940e 11f9                 	call GFX_set_shape
0007b0 e0ea
0007b1 e2f1                      	set_pointer ZL,ZH, Char_177
0007b2 940e 11eb                 	call GFX_draw_shape
0007b4 e1a0
0007b5 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0007b6 e426                      	ldi X_mov,70
0007b7 e13e                      	ldi Y_mov,30
0007b8 940e 11c1                 	call GFX_set_array_pos
0007ba 940e 11f9                 	call GFX_set_shape
0007bc e0ea
0007bd e2f1                      	set_pointer ZL,ZH, Char_177
0007be 940e 11eb                 	call GFX_draw_shape
0007c0 e1a0
0007c1 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0007c2 e520                      	ldi X_mov,80
0007c3 e134                      	ldi Y_mov,20
0007c4 940e 11c1                 	call GFX_set_array_pos
0007c6 940e 11f9                 	call GFX_set_shape
0007c8 e0ea
0007c9 e2f1                      	set_pointer ZL,ZH, Char_177
0007ca 940e 11eb                 	call GFX_draw_shape
0007cc e1a0
0007cd e0b2                      	set_pointer XL,XH,pixel_array
                                 
0007ce e52a                      	ldi X_mov,90
0007cf e03a                      	ldi Y_mov,10
0007d0 940e 11c1                 	call GFX_set_array_pos
0007d2 940e 11f9                 	call GFX_set_shape
0007d4 e0ea
0007d5 e2f1                      	set_pointer ZL,ZH, Char_177
0007d6 940e 11eb                 	call GFX_draw_shape
0007d8 e1a0
0007d9 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0007da e624                      	ldi X_mov,100
0007db e030                      	ldi Y_mov,0
0007dc 940e 11c1                 	call GFX_set_array_pos
0007de 940e 11f9                 	call GFX_set_shape
0007e0 e0ea
0007e1 e2f1                      	set_pointer ZL,ZH, Char_177
0007e2 940e 11eb                 	call GFX_draw_shape
0007e4 e1a0
0007e5 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0007e6 e62e                      	ldi X_mov,110
0007e7 e030                      	ldi Y_mov,0
0007e8 940e 11c1                 	call GFX_set_array_pos
0007ea 940e 11f9                 	call GFX_set_shape
0007ec e0ea
0007ed e2f1                      	set_pointer ZL,ZH, Char_177
0007ee 940e 11eb                 	call GFX_draw_shape
0007f0 e1a0
0007f1 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0007f2 e728                      	ldi X_mov,120
0007f3 e030                      	ldi Y_mov,0
0007f4 940e 11c1                 	call GFX_set_array_pos
0007f6 940e 11f9                 	call GFX_set_shape
0007f8 e0ea
0007f9 e2f1                      	set_pointer ZL,ZH, Char_177
0007fa 940e 11eb                 	call GFX_draw_shape
0007fc e1a0
0007fd e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0007fe 940e 0da1                 	call OLED_refresh_screen
000800 940e 0d1e                 	call delay_1s
000802 c000                      	rjmp loop12
                                 
                                 loop12:
000803 940e 1207                 	call GFX_clear_array
000805 e020                      	ldi X_mov,0
000806 e33c                      	ldi Y_mov,60
000807 940e 11c1                 	call GFX_set_array_pos
000809 940e 11f9                 	call GFX_set_shape
00080b e0ea
00080c e2f1                      	set_pointer ZL,ZH, Char_177
00080d 940e 11eb                 	call GFX_draw_shape
00080f e1a0
000810 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000811 e02a                      	ldi X_mov,10
000812 e33c                      	ldi Y_mov,60
000813 940e 11c1                 	call GFX_set_array_pos
000815 940e 11f9                 	call GFX_set_shape
000817 e0ea
000818 e2f1                      	set_pointer ZL,ZH, Char_177
000819 940e 11eb                 	call GFX_draw_shape
00081b e1a0
00081c e0b2                      	set_pointer XL,XH,pixel_array
                                 	
00081d e124                      	ldi X_mov,20
00081e e33c                      	ldi Y_mov,60
00081f 940e 11c1                 	call GFX_set_array_pos
000821 940e 11f9                 	call GFX_set_shape
000823 e0ea
000824 e2f1                      	set_pointer ZL,ZH, Char_177
000825 940e 11eb                 	call GFX_draw_shape
000827 e1a0
000828 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000829 e12e                      	ldi X_mov,30
00082a e33c                      	ldi Y_mov,60
00082b 940e 11c1                 	call GFX_set_array_pos
00082d 940e 11f9                 	call GFX_set_shape
00082f e0ea
000830 e2f1                      	set_pointer ZL,ZH, Char_177
000831 940e 11eb                 	call GFX_draw_shape
000833 e1a0
000834 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000835 e228                      	ldi X_mov,40
000836 e33c                      	ldi Y_mov,60
000837 940e 11c1                 	call GFX_set_array_pos
000839 940e 11f9                 	call GFX_set_shape
00083b e0ea
00083c e2f1                      	set_pointer ZL,ZH, Char_177
00083d 940e 11eb                 	call GFX_draw_shape
00083f e1a0
000840 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000841 e322                      	ldi X_mov,50
000842 e33c                      	ldi Y_mov,60
000843 940e 11c1                 	call GFX_set_array_pos
000845 940e 11f9                 	call GFX_set_shape
000847 e0ea
000848 e2f1                      	set_pointer ZL,ZH, Char_177
000849 940e 11eb                 	call GFX_draw_shape
00084b e1a0
00084c e0b2                      	set_pointer XL,XH,pixel_array
                                 
00084d e32c                      	ldi X_mov,60
00084e e332                      	ldi Y_mov,50
00084f 940e 11c1                 	call GFX_set_array_pos
000851 940e 11f9                 	call GFX_set_shape
000853 e0ea
000854 e2f1                      	set_pointer ZL,ZH, Char_177
000855 940e 11eb                 	call GFX_draw_shape
000857 e1a0
000858 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000859 e426                      	ldi X_mov,70
00085a e238                      	ldi Y_mov,40
00085b 940e 11c1                 	call GFX_set_array_pos
00085d 940e 11f9                 	call GFX_set_shape
00085f e0ea
000860 e2f1                      	set_pointer ZL,ZH, Char_177
000861 940e 11eb                 	call GFX_draw_shape
000863 e1a0
000864 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000865 e520                      	ldi X_mov,80
000866 e13e                      	ldi Y_mov,30
000867 940e 11c1                 	call GFX_set_array_pos
000869 940e 11f9                 	call GFX_set_shape
00086b e0ea
00086c e2f1                      	set_pointer ZL,ZH, Char_177
00086d 940e 11eb                 	call GFX_draw_shape
00086f e1a0
000870 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000871 e52a                      	ldi X_mov,90
000872 e134                      	ldi Y_mov,20
000873 940e 11c1                 	call GFX_set_array_pos
000875 940e 11f9                 	call GFX_set_shape
000877 e0ea
000878 e2f1                      	set_pointer ZL,ZH, Char_177
000879 940e 11eb                 	call GFX_draw_shape
00087b e1a0
00087c e0b2                      	set_pointer XL,XH,pixel_array
                                 
00087d e624                      	ldi X_mov,100
00087e e03a                      	ldi Y_mov,10
00087f 940e 11c1                 	call GFX_set_array_pos
000881 940e 11f9                 	call GFX_set_shape
000883 e0ea
000884 e2f1                      	set_pointer ZL,ZH, Char_177
000885 940e 11eb                 	call GFX_draw_shape
000887 e1a0
000888 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000889 e62e                      	ldi X_mov,110
00088a e030                      	ldi Y_mov,0
00088b 940e 11c1                 	call GFX_set_array_pos
00088d 940e 11f9                 	call GFX_set_shape
00088f e0ea
000890 e2f1                      	set_pointer ZL,ZH, Char_177
000891 940e 11eb                 	call GFX_draw_shape
000893 e1a0
000894 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000895 e728                      	ldi X_mov,120
000896 e030                      	ldi Y_mov,0
000897 940e 11c1                 	call GFX_set_array_pos
000899 940e 11f9                 	call GFX_set_shape
00089b e0ea
00089c e2f1                      	set_pointer ZL,ZH, Char_177
00089d 940e 11eb                 	call GFX_draw_shape
00089f e1a0
0008a0 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0008a1 940e 0da1                 	call OLED_refresh_screen
0008a3 940e 0d1e                 	call delay_1s
0008a5 c000                      	rjmp loop13
                                 
                                 
                                 loop13:
0008a6 940e 1207                 	call GFX_clear_array
0008a8 e020                      	ldi X_mov,0
0008a9 e33c                      	ldi Y_mov,60
0008aa 940e 11c1                 	call GFX_set_array_pos
0008ac 940e 11f9                 	call GFX_set_shape
0008ae e0ea
0008af e2f1                      	set_pointer ZL,ZH, Char_177
0008b0 940e 11eb                 	call GFX_draw_shape
0008b2 e1a0
0008b3 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0008b4 e02a                      	ldi X_mov,10
0008b5 e33c                      	ldi Y_mov,60
0008b6 940e 11c1                 	call GFX_set_array_pos
0008b8 940e 11f9                 	call GFX_set_shape
0008ba e0ea
0008bb e2f1                      	set_pointer ZL,ZH, Char_177
0008bc 940e 11eb                 	call GFX_draw_shape
0008be e1a0
0008bf e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0008c0 e124                      	ldi X_mov,20
0008c1 e33c                      	ldi Y_mov,60
0008c2 940e 11c1                 	call GFX_set_array_pos
0008c4 940e 11f9                 	call GFX_set_shape
0008c6 e0ea
0008c7 e2f1                      	set_pointer ZL,ZH, Char_177
0008c8 940e 11eb                 	call GFX_draw_shape
0008ca e1a0
0008cb e0b2                      	set_pointer XL,XH,pixel_array
                                 
0008cc e12e                      	ldi X_mov,30
0008cd e33c                      	ldi Y_mov,60
0008ce 940e 11c1                 	call GFX_set_array_pos
0008d0 940e 11f9                 	call GFX_set_shape
0008d2 e0ea
0008d3 e2f1                      	set_pointer ZL,ZH, Char_177
0008d4 940e 11eb                 	call GFX_draw_shape
0008d6 e1a0
0008d7 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0008d8 e228                      	ldi X_mov,40
0008d9 e33c                      	ldi Y_mov,60
0008da 940e 11c1                 	call GFX_set_array_pos
0008dc 940e 11f9                 	call GFX_set_shape
0008de e0ea
0008df e2f1                      	set_pointer ZL,ZH, Char_177
0008e0 940e 11eb                 	call GFX_draw_shape
0008e2 e1a0
0008e3 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0008e4 e322                      	ldi X_mov,50
0008e5 e33c                      	ldi Y_mov,60
0008e6 940e 11c1                 	call GFX_set_array_pos
0008e8 940e 11f9                 	call GFX_set_shape
0008ea e0ea
0008eb e2f1                      	set_pointer ZL,ZH, Char_177
0008ec 940e 11eb                 	call GFX_draw_shape
0008ee e1a0
0008ef e0b2                      	set_pointer XL,XH,pixel_array
                                 
0008f0 e32c                      	ldi X_mov,60
0008f1 e33c                      	ldi Y_mov,60
0008f2 940e 11c1                 	call GFX_set_array_pos
0008f4 940e 11f9                 	call GFX_set_shape
0008f6 e0ea
0008f7 e2f1                      	set_pointer ZL,ZH, Char_177
0008f8 940e 11eb                 	call GFX_draw_shape
0008fa e1a0
0008fb e0b2                      	set_pointer XL,XH,pixel_array
                                 
0008fc e426                      	ldi X_mov,70
0008fd e332                      	ldi Y_mov,50
0008fe 940e 11c1                 	call GFX_set_array_pos
000900 940e 11f9                 	call GFX_set_shape
000902 e0ea
000903 e2f1                      	set_pointer ZL,ZH, Char_177
000904 940e 11eb                 	call GFX_draw_shape
000906 e1a0
000907 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000908 e520                      	ldi X_mov,80
000909 e238                      	ldi Y_mov,40
00090a 940e 11c1                 	call GFX_set_array_pos
00090c 940e 11f9                 	call GFX_set_shape
00090e e0ea
00090f e2f1                      	set_pointer ZL,ZH, Char_177
000910 940e 11eb                 	call GFX_draw_shape
000912 e1a0
000913 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000914 e52a                      	ldi X_mov,90
000915 e13e                      	ldi Y_mov,30
000916 940e 11c1                 	call GFX_set_array_pos
000918 940e 11f9                 	call GFX_set_shape
00091a e0ea
00091b e2f1                      	set_pointer ZL,ZH, Char_177
00091c 940e 11eb                 	call GFX_draw_shape
00091e e1a0
00091f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000920 e624                      	ldi X_mov,100
000921 e134                      	ldi Y_mov,20
000922 940e 11c1                 	call GFX_set_array_pos
000924 940e 11f9                 	call GFX_set_shape
000926 e0ea
000927 e2f1                      	set_pointer ZL,ZH, Char_177
000928 940e 11eb                 	call GFX_draw_shape
00092a e1a0
00092b e0b2                      	set_pointer XL,XH,pixel_array
                                 
00092c e62e                      	ldi X_mov,110
00092d e03a                      	ldi Y_mov,10
00092e 940e 11c1                 	call GFX_set_array_pos
000930 940e 11f9                 	call GFX_set_shape
000932 e0ea
000933 e2f1                      	set_pointer ZL,ZH, Char_177
000934 940e 11eb                 	call GFX_draw_shape
000936 e1a0
000937 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000938 e728                      	ldi X_mov,120
000939 e030                      	ldi Y_mov,0
00093a 940e 11c1                 	call GFX_set_array_pos
00093c 940e 11f9                 	call GFX_set_shape
00093e e0ea
00093f e2f1                      	set_pointer ZL,ZH, Char_177
000940 940e 11eb                 	call GFX_draw_shape
000942 e1a0
000943 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000944 940e 0da1                 	call OLED_refresh_screen
000946 940e 0d1e                 	call delay_1s
000948 c000                      	rjmp loop14
                                 
                                 loop14:
000949 940e 1207                 	call GFX_clear_array
00094b e020                      	ldi X_mov,0
00094c e33c                      	ldi Y_mov,60
00094d 940e 11c1                 	call GFX_set_array_pos
00094f 940e 11f9                 	call GFX_set_shape
000951 e0ea
000952 e2f1                      	set_pointer ZL,ZH, Char_177
000953 940e 11eb                 	call GFX_draw_shape
000955 e1a0
000956 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000957 e02a                      	ldi X_mov,10
000958 e33c                      	ldi Y_mov,60
000959 940e 11c1                 	call GFX_set_array_pos
00095b 940e 11f9                 	call GFX_set_shape
00095d e0ea
00095e e2f1                      	set_pointer ZL,ZH, Char_177
00095f 940e 11eb                 	call GFX_draw_shape
000961 e1a0
000962 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000963 e124                      	ldi X_mov,20
000964 e33c                      	ldi Y_mov,60
000965 940e 11c1                 	call GFX_set_array_pos
000967 940e 11f9                 	call GFX_set_shape
000969 e0ea
00096a e2f1                      	set_pointer ZL,ZH, Char_177
00096b 940e 11eb                 	call GFX_draw_shape
00096d e1a0
00096e e0b2                      	set_pointer XL,XH,pixel_array
                                 
00096f e12e                      	ldi X_mov,30
000970 e33c                      	ldi Y_mov,60
000971 940e 11c1                 	call GFX_set_array_pos
000973 940e 11f9                 	call GFX_set_shape
000975 e0ea
000976 e2f1                      	set_pointer ZL,ZH, Char_177
000977 940e 11eb                 	call GFX_draw_shape
000979 e1a0
00097a e0b2                      	set_pointer XL,XH,pixel_array
                                 
00097b e228                      	ldi X_mov,40
00097c e33c                      	ldi Y_mov,60
00097d 940e 11c1                 	call GFX_set_array_pos
00097f 940e 11f9                 	call GFX_set_shape
000981 e0ea
000982 e2f1                      	set_pointer ZL,ZH, Char_177
000983 940e 11eb                 	call GFX_draw_shape
000985 e1a0
000986 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000987 e322                      	ldi X_mov,50
000988 e33c                      	ldi Y_mov,60
000989 940e 11c1                 	call GFX_set_array_pos
00098b 940e 11f9                 	call GFX_set_shape
00098d e0ea
00098e e2f1                      	set_pointer ZL,ZH, Char_177
00098f 940e 11eb                 	call GFX_draw_shape
000991 e1a0
000992 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000993 e32c                      	ldi X_mov,60
000994 e33c                      	ldi Y_mov,60
000995 940e 11c1                 	call GFX_set_array_pos
000997 940e 11f9                 	call GFX_set_shape
000999 e0ea
00099a e2f1                      	set_pointer ZL,ZH, Char_177
00099b 940e 11eb                 	call GFX_draw_shape
00099d e1a0
00099e e0b2                      	set_pointer XL,XH,pixel_array
                                 
00099f e426                      	ldi X_mov,70
0009a0 e33c                      	ldi Y_mov,60
0009a1 940e 11c1                 	call GFX_set_array_pos
0009a3 940e 11f9                 	call GFX_set_shape
0009a5 e0ea
0009a6 e2f1                      	set_pointer ZL,ZH, Char_177
0009a7 940e 11eb                 	call GFX_draw_shape
0009a9 e1a0
0009aa e0b2                      	set_pointer XL,XH,pixel_array
                                 
0009ab e520                      	ldi X_mov,80
0009ac e332                      	ldi Y_mov,50
0009ad 940e 11c1                 	call GFX_set_array_pos
0009af 940e 11f9                 	call GFX_set_shape
0009b1 e0ea
0009b2 e2f1                      	set_pointer ZL,ZH, Char_177
0009b3 940e 11eb                 	call GFX_draw_shape
0009b5 e1a0
0009b6 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0009b7 e52a                      	ldi X_mov,90
0009b8 e238                      	ldi Y_mov,40
0009b9 940e 11c1                 	call GFX_set_array_pos
0009bb 940e 11f9                 	call GFX_set_shape
0009bd e0ea
0009be e2f1                      	set_pointer ZL,ZH, Char_177
0009bf 940e 11eb                 	call GFX_draw_shape
0009c1 e1a0
0009c2 e0b2                      	set_pointer XL,XH,pixel_array
                                 
0009c3 e624                      	ldi X_mov,100
0009c4 e13e                      	ldi Y_mov,30
0009c5 940e 11c1                 	call GFX_set_array_pos
0009c7 940e 11f9                 	call GFX_set_shape
0009c9 e0ea
0009ca e2f1                      	set_pointer ZL,ZH, Char_177
0009cb 940e 11eb                 	call GFX_draw_shape
0009cd e1a0
0009ce e0b2                      	set_pointer XL,XH,pixel_array
                                 
0009cf e62e                      	ldi X_mov,110
0009d0 e134                      	ldi Y_mov,20
0009d1 940e 11c1                 	call GFX_set_array_pos
0009d3 940e 11f9                 	call GFX_set_shape
0009d5 e0ea
0009d6 e2f1                      	set_pointer ZL,ZH, Char_177
0009d7 940e 11eb                 	call GFX_draw_shape
0009d9 e1a0
0009da e0b2                      	set_pointer XL,XH,pixel_array
                                 
0009db e728                      	ldi X_mov,120
0009dc e03a                      	ldi Y_mov,10
0009dd 940e 11c1                 	call GFX_set_array_pos
0009df 940e 11f9                 	call GFX_set_shape
0009e1 e0ea
0009e2 e2f1                      	set_pointer ZL,ZH, Char_177
0009e3 940e 11eb                 	call GFX_draw_shape
0009e5 e1a0
0009e6 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0009e7 940e 0da1                 	call OLED_refresh_screen
0009e9 940e 0d1e                 	call delay_1s
0009eb c000                      	rjmp loop15
                                 
                                 loop15:
0009ec 940e 1207                 	call GFX_clear_array
0009ee e020                      	ldi X_mov,0
0009ef e33c                      	ldi Y_mov,60
0009f0 940e 11c1                 	call GFX_set_array_pos
0009f2 940e 11f9                 	call GFX_set_shape
0009f4 e0ea
0009f5 e2f1                      	set_pointer ZL,ZH, Char_177
0009f6 940e 11eb                 	call GFX_draw_shape
0009f8 e1a0
0009f9 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
0009fa e02a                      	ldi X_mov,10
0009fb e33c                      	ldi Y_mov,60
0009fc 940e 11c1                 	call GFX_set_array_pos
0009fe 940e 11f9                 	call GFX_set_shape
000a00 e0ea
000a01 e2f1                      	set_pointer ZL,ZH, Char_177
000a02 940e 11eb                 	call GFX_draw_shape
000a04 e1a0
000a05 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000a06 e124                      	ldi X_mov,20
000a07 e33c                      	ldi Y_mov,60
000a08 940e 11c1                 	call GFX_set_array_pos
000a0a 940e 11f9                 	call GFX_set_shape
000a0c e0ea
000a0d e2f1                      	set_pointer ZL,ZH, Char_177
000a0e 940e 11eb                 	call GFX_draw_shape
000a10 e1a0
000a11 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a12 e12e                      	ldi X_mov,30
000a13 e33c                      	ldi Y_mov,60
000a14 940e 11c1                 	call GFX_set_array_pos
000a16 940e 11f9                 	call GFX_set_shape
000a18 e0ea
000a19 e2f1                      	set_pointer ZL,ZH, Char_177
000a1a 940e 11eb                 	call GFX_draw_shape
000a1c e1a0
000a1d e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a1e e228                      	ldi X_mov,40
000a1f e33c                      	ldi Y_mov,60
000a20 940e 11c1                 	call GFX_set_array_pos
000a22 940e 11f9                 	call GFX_set_shape
000a24 e0ea
000a25 e2f1                      	set_pointer ZL,ZH, Char_177
000a26 940e 11eb                 	call GFX_draw_shape
000a28 e1a0
000a29 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a2a e322                      	ldi X_mov,50
000a2b e33c                      	ldi Y_mov,60
000a2c 940e 11c1                 	call GFX_set_array_pos
000a2e 940e 11f9                 	call GFX_set_shape
000a30 e0ea
000a31 e2f1                      	set_pointer ZL,ZH, Char_177
000a32 940e 11eb                 	call GFX_draw_shape
000a34 e1a0
000a35 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a36 e32c                      	ldi X_mov,60
000a37 e33c                      	ldi Y_mov,60
000a38 940e 11c1                 	call GFX_set_array_pos
000a3a 940e 11f9                 	call GFX_set_shape
000a3c e0ea
000a3d e2f1                      	set_pointer ZL,ZH, Char_177
000a3e 940e 11eb                 	call GFX_draw_shape
000a40 e1a0
000a41 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a42 e426                      	ldi X_mov,70
000a43 e33c                      	ldi Y_mov,60
000a44 940e 11c1                 	call GFX_set_array_pos
000a46 940e 11f9                 	call GFX_set_shape
000a48 e0ea
000a49 e2f1                      	set_pointer ZL,ZH, Char_177
000a4a 940e 11eb                 	call GFX_draw_shape
000a4c e1a0
000a4d e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a4e e520                      	ldi X_mov,80
000a4f e33c                      	ldi Y_mov,60
000a50 940e 11c1                 	call GFX_set_array_pos
000a52 940e 11f9                 	call GFX_set_shape
000a54 e0ea
000a55 e2f1                      	set_pointer ZL,ZH, Char_177
000a56 940e 11eb                 	call GFX_draw_shape
000a58 e1a0
000a59 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a5a e52a                      	ldi X_mov,90
000a5b e332                      	ldi Y_mov,50
000a5c 940e 11c1                 	call GFX_set_array_pos
000a5e 940e 11f9                 	call GFX_set_shape
000a60 e0ea
000a61 e2f1                      	set_pointer ZL,ZH, Char_177
000a62 940e 11eb                 	call GFX_draw_shape
000a64 e1a0
000a65 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a66 e624                      	ldi X_mov,100
000a67 e238                      	ldi Y_mov,40
000a68 940e 11c1                 	call GFX_set_array_pos
000a6a 940e 11f9                 	call GFX_set_shape
000a6c e0ea
000a6d e2f1                      	set_pointer ZL,ZH, Char_177
000a6e 940e 11eb                 	call GFX_draw_shape
000a70 e1a0
000a71 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a72 e62e                      	ldi X_mov,110
000a73 e13e                      	ldi Y_mov,30
000a74 940e 11c1                 	call GFX_set_array_pos
000a76 940e 11f9                 	call GFX_set_shape
000a78 e0ea
000a79 e2f1                      	set_pointer ZL,ZH, Char_177
000a7a 940e 11eb                 	call GFX_draw_shape
000a7c e1a0
000a7d e0b2                      	set_pointer XL,XH,pixel_array
                                 
000a7e e728                      	ldi X_mov,120
000a7f e134                      	ldi Y_mov,20
000a80 940e 11c1                 	call GFX_set_array_pos
000a82 940e 11f9                 	call GFX_set_shape
000a84 e0ea
000a85 e2f1                      	set_pointer ZL,ZH, Char_177
000a86 940e 11eb                 	call GFX_draw_shape
000a88 e1a0
000a89 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000a8a 940e 0da1                 	call OLED_refresh_screen
000a8c 940e 0d1e                 	call delay_1s
000a8e c000                      	rjmp loop16
                                 
                                 
                                 loop16:
000a8f 940e 1207                 	call GFX_clear_array
000a91 e020                      	ldi X_mov,0
000a92 e33c                      	ldi Y_mov,60
000a93 940e 11c1                 	call GFX_set_array_pos
000a95 940e 11f9                 	call GFX_set_shape
000a97 e0ea
000a98 e2f1                      	set_pointer ZL,ZH, Char_177
000a99 940e 11eb                 	call GFX_draw_shape
000a9b e1a0
000a9c e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000a9d e02a                      	ldi X_mov,10
000a9e e33c                      	ldi Y_mov,60
000a9f 940e 11c1                 	call GFX_set_array_pos
000aa1 940e 11f9                 	call GFX_set_shape
000aa3 e0ea
000aa4 e2f1                      	set_pointer ZL,ZH, Char_177
000aa5 940e 11eb                 	call GFX_draw_shape
000aa7 e1a0
000aa8 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000aa9 e124                      	ldi X_mov,20
000aaa e33c                      	ldi Y_mov,60
000aab 940e 11c1                 	call GFX_set_array_pos
000aad 940e 11f9                 	call GFX_set_shape
000aaf e0ea
000ab0 e2f1                      	set_pointer ZL,ZH, Char_177
000ab1 940e 11eb                 	call GFX_draw_shape
000ab3 e1a0
000ab4 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000ab5 e12e                      	ldi X_mov,30
000ab6 e33c                      	ldi Y_mov,60
000ab7 940e 11c1                 	call GFX_set_array_pos
000ab9 940e 11f9                 	call GFX_set_shape
000abb e0ea
000abc e2f1                      	set_pointer ZL,ZH, Char_177
000abd 940e 11eb                 	call GFX_draw_shape
000abf e1a0
000ac0 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000ac1 e228                      	ldi X_mov,40
000ac2 e33c                      	ldi Y_mov,60
000ac3 940e 11c1                 	call GFX_set_array_pos
000ac5 940e 11f9                 	call GFX_set_shape
000ac7 e0ea
000ac8 e2f1                      	set_pointer ZL,ZH, Char_177
000ac9 940e 11eb                 	call GFX_draw_shape
000acb e1a0
000acc e0b2                      	set_pointer XL,XH,pixel_array
                                 
000acd e322                      	ldi X_mov,50
000ace e33c                      	ldi Y_mov,60
000acf 940e 11c1                 	call GFX_set_array_pos
000ad1 940e 11f9                 	call GFX_set_shape
000ad3 e0ea
000ad4 e2f1                      	set_pointer ZL,ZH, Char_177
000ad5 940e 11eb                 	call GFX_draw_shape
000ad7 e1a0
000ad8 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000ad9 e32c                      	ldi X_mov,60
000ada e33c                      	ldi Y_mov,60
000adb 940e 11c1                 	call GFX_set_array_pos
000add 940e 11f9                 	call GFX_set_shape
000adf e0ea
000ae0 e2f1                      	set_pointer ZL,ZH, Char_177
000ae1 940e 11eb                 	call GFX_draw_shape
000ae3 e1a0
000ae4 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000ae5 e426                      	ldi X_mov,70
000ae6 e33c                      	ldi Y_mov,60
000ae7 940e 11c1                 	call GFX_set_array_pos
000ae9 940e 11f9                 	call GFX_set_shape
000aeb e0ea
000aec e2f1                      	set_pointer ZL,ZH, Char_177
000aed 940e 11eb                 	call GFX_draw_shape
000aef e1a0
000af0 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000af1 e520                      	ldi X_mov,80
000af2 e33c                      	ldi Y_mov,60
000af3 940e 11c1                 	call GFX_set_array_pos
000af5 940e 11f9                 	call GFX_set_shape
000af7 e0ea
000af8 e2f1                      	set_pointer ZL,ZH, Char_177
000af9 940e 11eb                 	call GFX_draw_shape
000afb e1a0
000afc e0b2                      	set_pointer XL,XH,pixel_array
                                 
000afd e52a                      	ldi X_mov,90
000afe e33c                      	ldi Y_mov,60
000aff 940e 11c1                 	call GFX_set_array_pos
000b01 940e 11f9                 	call GFX_set_shape
000b03 e0ea
000b04 e2f1                      	set_pointer ZL,ZH, Char_177
000b05 940e 11eb                 	call GFX_draw_shape
000b07 e1a0
000b08 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b09 e624                      	ldi X_mov,100
000b0a e332                      	ldi Y_mov,50
000b0b 940e 11c1                 	call GFX_set_array_pos
000b0d 940e 11f9                 	call GFX_set_shape
000b0f e0ea
000b10 e2f1                      	set_pointer ZL,ZH, Char_177
000b11 940e 11eb                 	call GFX_draw_shape
000b13 e1a0
000b14 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b15 e62e                      	ldi X_mov,110
000b16 e238                      	ldi Y_mov,40
000b17 940e 11c1                 	call GFX_set_array_pos
000b19 940e 11f9                 	call GFX_set_shape
000b1b e0ea
000b1c e2f1                      	set_pointer ZL,ZH, Char_177
000b1d 940e 11eb                 	call GFX_draw_shape
000b1f e1a0
000b20 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b21 e728                      	ldi X_mov,120
000b22 e13e                      	ldi Y_mov,30
000b23 940e 11c1                 	call GFX_set_array_pos
000b25 940e 11f9                 	call GFX_set_shape
000b27 e0ea
000b28 e2f1                      	set_pointer ZL,ZH, Char_177
000b29 940e 11eb                 	call GFX_draw_shape
000b2b e1a0
000b2c e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000b2d 940e 0da1                 	call OLED_refresh_screen
000b2f 940e 0d1e                 	call delay_1s
000b31 c000                      	rjmp loop17
                                 
                                 loop17:
000b32 940e 1207                 	call GFX_clear_array
000b34 e020                      	ldi X_mov,0
000b35 e33c                      	ldi Y_mov,60
000b36 940e 11c1                 	call GFX_set_array_pos
000b38 940e 11f9                 	call GFX_set_shape
000b3a e0ea
000b3b e2f1                      	set_pointer ZL,ZH, Char_177
000b3c 940e 11eb                 	call GFX_draw_shape
000b3e e1a0
000b3f e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000b40 e02a                      	ldi X_mov,10
000b41 e33c                      	ldi Y_mov,60
000b42 940e 11c1                 	call GFX_set_array_pos
000b44 940e 11f9                 	call GFX_set_shape
000b46 e0ea
000b47 e2f1                      	set_pointer ZL,ZH, Char_177
000b48 940e 11eb                 	call GFX_draw_shape
000b4a e1a0
000b4b e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000b4c e124                      	ldi X_mov,20
000b4d e33c                      	ldi Y_mov,60
000b4e 940e 11c1                 	call GFX_set_array_pos
000b50 940e 11f9                 	call GFX_set_shape
000b52 e0ea
000b53 e2f1                      	set_pointer ZL,ZH, Char_177
000b54 940e 11eb                 	call GFX_draw_shape
000b56 e1a0
000b57 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b58 e12e                      	ldi X_mov,30
000b59 e33c                      	ldi Y_mov,60
000b5a 940e 11c1                 	call GFX_set_array_pos
000b5c 940e 11f9                 	call GFX_set_shape
000b5e e0ea
000b5f e2f1                      	set_pointer ZL,ZH, Char_177
000b60 940e 11eb                 	call GFX_draw_shape
000b62 e1a0
000b63 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b64 e228                      	ldi X_mov,40
000b65 e33c                      	ldi Y_mov,60
000b66 940e 11c1                 	call GFX_set_array_pos
000b68 940e 11f9                 	call GFX_set_shape
000b6a e0ea
000b6b e2f1                      	set_pointer ZL,ZH, Char_177
000b6c 940e 11eb                 	call GFX_draw_shape
000b6e e1a0
000b6f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b70 e322                      	ldi X_mov,50
000b71 e33c                      	ldi Y_mov,60
000b72 940e 11c1                 	call GFX_set_array_pos
000b74 940e 11f9                 	call GFX_set_shape
000b76 e0ea
000b77 e2f1                      	set_pointer ZL,ZH, Char_177
000b78 940e 11eb                 	call GFX_draw_shape
000b7a e1a0
000b7b e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b7c e32c                      	ldi X_mov,60
000b7d e33c                      	ldi Y_mov,60
000b7e 940e 11c1                 	call GFX_set_array_pos
000b80 940e 11f9                 	call GFX_set_shape
000b82 e0ea
000b83 e2f1                      	set_pointer ZL,ZH, Char_177
000b84 940e 11eb                 	call GFX_draw_shape
000b86 e1a0
000b87 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b88 e426                      	ldi X_mov,70
000b89 e33c                      	ldi Y_mov,60
000b8a 940e 11c1                 	call GFX_set_array_pos
000b8c 940e 11f9                 	call GFX_set_shape
000b8e e0ea
000b8f e2f1                      	set_pointer ZL,ZH, Char_177
000b90 940e 11eb                 	call GFX_draw_shape
000b92 e1a0
000b93 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000b94 e520                      	ldi X_mov,80
000b95 e33c                      	ldi Y_mov,60
000b96 940e 11c1                 	call GFX_set_array_pos
000b98 940e 11f9                 	call GFX_set_shape
000b9a e0ea
000b9b e2f1                      	set_pointer ZL,ZH, Char_177
000b9c 940e 11eb                 	call GFX_draw_shape
000b9e e1a0
000b9f e0b2                      	set_pointer XL,XH,pixel_array
                                 
000ba0 e52a                      	ldi X_mov,90
000ba1 e33c                      	ldi Y_mov,60
000ba2 940e 11c1                 	call GFX_set_array_pos
000ba4 940e 11f9                 	call GFX_set_shape
000ba6 e0ea
000ba7 e2f1                      	set_pointer ZL,ZH, Char_177
000ba8 940e 11eb                 	call GFX_draw_shape
000baa e1a0
000bab e0b2                      	set_pointer XL,XH,pixel_array
                                 
000bac e624                      	ldi X_mov,100
000bad e33c                      	ldi Y_mov,60
000bae 940e 11c1                 	call GFX_set_array_pos
000bb0 940e 11f9                 	call GFX_set_shape
000bb2 e0ea
000bb3 e2f1                      	set_pointer ZL,ZH, Char_177
000bb4 940e 11eb                 	call GFX_draw_shape
000bb6 e1a0
000bb7 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000bb8 e62e                      	ldi X_mov,110
000bb9 e332                      	ldi Y_mov,50
000bba 940e 11c1                 	call GFX_set_array_pos
000bbc 940e 11f9                 	call GFX_set_shape
000bbe e0ea
000bbf e2f1                      	set_pointer ZL,ZH, Char_177
000bc0 940e 11eb                 	call GFX_draw_shape
000bc2 e1a0
000bc3 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000bc4 e728                      	ldi X_mov,120
000bc5 e238                      	ldi Y_mov,40
000bc6 940e 11c1                 	call GFX_set_array_pos
000bc8 940e 11f9                 	call GFX_set_shape
000bca e0ea
000bcb e2f1                      	set_pointer ZL,ZH, Char_177
000bcc 940e 11eb                 	call GFX_draw_shape
000bce e1a0
000bcf e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000bd0 940e 0da1                 	call OLED_refresh_screen
000bd2 940e 0d1e                 	call delay_1s
000bd4 c000                      	rjmp loop18
                                 
                                 
                                 loop18:
000bd5 940e 1207                 	call GFX_clear_array
000bd7 e020                      	ldi X_mov,0
000bd8 e33c                      	ldi Y_mov,60
000bd9 940e 11c1                 	call GFX_set_array_pos
000bdb 940e 11f9                 	call GFX_set_shape
000bdd e0ea
000bde e2f1                      	set_pointer ZL,ZH, Char_177
000bdf 940e 11eb                 	call GFX_draw_shape
000be1 e1a0
000be2 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000be3 e02a                      	ldi X_mov,10
000be4 e33c                      	ldi Y_mov,60
000be5 940e 11c1                 	call GFX_set_array_pos
000be7 940e 11f9                 	call GFX_set_shape
000be9 e0ea
000bea e2f1                      	set_pointer ZL,ZH, Char_177
000beb 940e 11eb                 	call GFX_draw_shape
000bed e1a0
000bee e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000bef e124                      	ldi X_mov,20
000bf0 e33c                      	ldi Y_mov,60
000bf1 940e 11c1                 	call GFX_set_array_pos
000bf3 940e 11f9                 	call GFX_set_shape
000bf5 e0ea
000bf6 e2f1                      	set_pointer ZL,ZH, Char_177
000bf7 940e 11eb                 	call GFX_draw_shape
000bf9 e1a0
000bfa e0b2                      	set_pointer XL,XH,pixel_array
                                 
000bfb e12e                      	ldi X_mov,30
000bfc e33c                      	ldi Y_mov,60
000bfd 940e 11c1                 	call GFX_set_array_pos
000bff 940e 11f9                 	call GFX_set_shape
000c01 e0ea
000c02 e2f1                      	set_pointer ZL,ZH, Char_177
000c03 940e 11eb                 	call GFX_draw_shape
000c05 e1a0
000c06 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c07 e228                      	ldi X_mov,40
000c08 e33c                      	ldi Y_mov,60
000c09 940e 11c1                 	call GFX_set_array_pos
000c0b 940e 11f9                 	call GFX_set_shape
000c0d e0ea
000c0e e2f1                      	set_pointer ZL,ZH, Char_177
000c0f 940e 11eb                 	call GFX_draw_shape
000c11 e1a0
000c12 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c13 e322                      	ldi X_mov,50
000c14 e33c                      	ldi Y_mov,60
000c15 940e 11c1                 	call GFX_set_array_pos
000c17 940e 11f9                 	call GFX_set_shape
000c19 e0ea
000c1a e2f1                      	set_pointer ZL,ZH, Char_177
000c1b 940e 11eb                 	call GFX_draw_shape
000c1d e1a0
000c1e e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c1f e32c                      	ldi X_mov,60
000c20 e33c                      	ldi Y_mov,60
000c21 940e 11c1                 	call GFX_set_array_pos
000c23 940e 11f9                 	call GFX_set_shape
000c25 e0ea
000c26 e2f1                      	set_pointer ZL,ZH, Char_177
000c27 940e 11eb                 	call GFX_draw_shape
000c29 e1a0
000c2a e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c2b e426                      	ldi X_mov,70
000c2c e33c                      	ldi Y_mov,60
000c2d 940e 11c1                 	call GFX_set_array_pos
000c2f 940e 11f9                 	call GFX_set_shape
000c31 e0ea
000c32 e2f1                      	set_pointer ZL,ZH, Char_177
000c33 940e 11eb                 	call GFX_draw_shape
000c35 e1a0
000c36 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c37 e520                      	ldi X_mov,80
000c38 e33c                      	ldi Y_mov,60
000c39 940e 11c1                 	call GFX_set_array_pos
000c3b 940e 11f9                 	call GFX_set_shape
000c3d e0ea
000c3e e2f1                      	set_pointer ZL,ZH, Char_177
000c3f 940e 11eb                 	call GFX_draw_shape
000c41 e1a0
000c42 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c43 e52a                      	ldi X_mov,90
000c44 e33c                      	ldi Y_mov,60
000c45 940e 11c1                 	call GFX_set_array_pos
000c47 940e 11f9                 	call GFX_set_shape
000c49 e0ea
000c4a e2f1                      	set_pointer ZL,ZH, Char_177
000c4b 940e 11eb                 	call GFX_draw_shape
000c4d e1a0
000c4e e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c4f e624                      	ldi X_mov,100
000c50 e33c                      	ldi Y_mov,60
000c51 940e 11c1                 	call GFX_set_array_pos
000c53 940e 11f9                 	call GFX_set_shape
000c55 e0ea
000c56 e2f1                      	set_pointer ZL,ZH, Char_177
000c57 940e 11eb                 	call GFX_draw_shape
000c59 e1a0
000c5a e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c5b e62e                      	ldi X_mov,110
000c5c e33c                      	ldi Y_mov,60
000c5d 940e 11c1                 	call GFX_set_array_pos
000c5f 940e 11f9                 	call GFX_set_shape
000c61 e0ea
000c62 e2f1                      	set_pointer ZL,ZH, Char_177
000c63 940e 11eb                 	call GFX_draw_shape
000c65 e1a0
000c66 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c67 e728                      	ldi X_mov,120
000c68 e332                      	ldi Y_mov,50
000c69 940e 11c1                 	call GFX_set_array_pos
000c6b 940e 11f9                 	call GFX_set_shape
000c6d e0ea
000c6e e2f1                      	set_pointer ZL,ZH, Char_177
000c6f 940e 11eb                 	call GFX_draw_shape
000c71 e1a0
000c72 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000c73 940e 0da1                 	call OLED_refresh_screen
000c75 940e 0d1e                 	call delay_1s
000c77 c000                      	rjmp loop19
                                 
                                 loop19:
000c78 940e 1207                 	call GFX_clear_array
000c7a e020                      	ldi X_mov,0
000c7b e33c                      	ldi Y_mov,60
000c7c 940e 11c1                 	call GFX_set_array_pos
000c7e 940e 11f9                 	call GFX_set_shape
000c80 e0ea
000c81 e2f1                      	set_pointer ZL,ZH, Char_177
000c82 940e 11eb                 	call GFX_draw_shape
000c84 e1a0
000c85 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000c86 e02a                      	ldi X_mov,10
000c87 e33c                      	ldi Y_mov,60
000c88 940e 11c1                 	call GFX_set_array_pos
000c8a 940e 11f9                 	call GFX_set_shape
000c8c e0ea
000c8d e2f1                      	set_pointer ZL,ZH, Char_177
000c8e 940e 11eb                 	call GFX_draw_shape
000c90 e1a0
000c91 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000c92 e124                      	ldi X_mov,20
000c93 e33c                      	ldi Y_mov,60
000c94 940e 11c1                 	call GFX_set_array_pos
000c96 940e 11f9                 	call GFX_set_shape
000c98 e0ea
000c99 e2f1                      	set_pointer ZL,ZH, Char_177
000c9a 940e 11eb                 	call GFX_draw_shape
000c9c e1a0
000c9d e0b2                      	set_pointer XL,XH,pixel_array
                                 
000c9e e12e                      	ldi X_mov,30
000c9f e33c                      	ldi Y_mov,60
000ca0 940e 11c1                 	call GFX_set_array_pos
000ca2 940e 11f9                 	call GFX_set_shape
000ca4 e0ea
000ca5 e2f1                      	set_pointer ZL,ZH, Char_177
000ca6 940e 11eb                 	call GFX_draw_shape
000ca8 e1a0
000ca9 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000caa e228                      	ldi X_mov,40
000cab e33c                      	ldi Y_mov,60
000cac 940e 11c1                 	call GFX_set_array_pos
000cae 940e 11f9                 	call GFX_set_shape
000cb0 e0ea
000cb1 e2f1                      	set_pointer ZL,ZH, Char_177
000cb2 940e 11eb                 	call GFX_draw_shape
000cb4 e1a0
000cb5 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000cb6 e322                      	ldi X_mov,50
000cb7 e33c                      	ldi Y_mov,60
000cb8 940e 11c1                 	call GFX_set_array_pos
000cba 940e 11f9                 	call GFX_set_shape
000cbc e0ea
000cbd e2f1                      	set_pointer ZL,ZH, Char_177
000cbe 940e 11eb                 	call GFX_draw_shape
000cc0 e1a0
000cc1 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000cc2 e32c                      	ldi X_mov,60
000cc3 e33c                      	ldi Y_mov,60
000cc4 940e 11c1                 	call GFX_set_array_pos
000cc6 940e 11f9                 	call GFX_set_shape
000cc8 e0ea
000cc9 e2f1                      	set_pointer ZL,ZH, Char_177
000cca 940e 11eb                 	call GFX_draw_shape
000ccc e1a0
000ccd e0b2                      	set_pointer XL,XH,pixel_array
                                 
000cce e426                      	ldi X_mov,70
000ccf e33c                      	ldi Y_mov,60
000cd0 940e 11c1                 	call GFX_set_array_pos
000cd2 940e 11f9                 	call GFX_set_shape
000cd4 e0ea
000cd5 e2f1                      	set_pointer ZL,ZH, Char_177
000cd6 940e 11eb                 	call GFX_draw_shape
000cd8 e1a0
000cd9 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000cda e520                      	ldi X_mov,80
000cdb e33c                      	ldi Y_mov,60
000cdc 940e 11c1                 	call GFX_set_array_pos
000cde 940e 11f9                 	call GFX_set_shape
000ce0 e0ea
000ce1 e2f1                      	set_pointer ZL,ZH, Char_177
000ce2 940e 11eb                 	call GFX_draw_shape
000ce4 e1a0
000ce5 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000ce6 e52a                      	ldi X_mov,90
000ce7 e33c                      	ldi Y_mov,60
000ce8 940e 11c1                 	call GFX_set_array_pos
000cea 940e 11f9                 	call GFX_set_shape
000cec e0ea
000ced e2f1                      	set_pointer ZL,ZH, Char_177
000cee 940e 11eb                 	call GFX_draw_shape
000cf0 e1a0
000cf1 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000cf2 e624                      	ldi X_mov,100
000cf3 e33c                      	ldi Y_mov,60
000cf4 940e 11c1                 	call GFX_set_array_pos
000cf6 940e 11f9                 	call GFX_set_shape
000cf8 e0ea
000cf9 e2f1                      	set_pointer ZL,ZH, Char_177
000cfa 940e 11eb                 	call GFX_draw_shape
000cfc e1a0
000cfd e0b2                      	set_pointer XL,XH,pixel_array
                                 
000cfe e62e                      	ldi X_mov,110
000cff e33c                      	ldi Y_mov,60
000d00 940e 11c1                 	call GFX_set_array_pos
000d02 940e 11f9                 	call GFX_set_shape
000d04 e0ea
000d05 e2f1                      	set_pointer ZL,ZH, Char_177
000d06 940e 11eb                 	call GFX_draw_shape
000d08 e1a0
000d09 e0b2                      	set_pointer XL,XH,pixel_array
                                 
000d0a e728                      	ldi X_mov,120
000d0b e33c                      	ldi Y_mov,60
000d0c 940e 11c1                 	call GFX_set_array_pos
000d0e 940e 11f9                 	call GFX_set_shape
000d10 e0ea
000d11 e2f1                      	set_pointer ZL,ZH, Char_177
000d12 940e 11eb                 	call GFX_draw_shape
000d14 e1a0
000d15 e0b2                      	set_pointer XL,XH,pixel_array
                                 	
000d16 940e 0da1                 	call OLED_refresh_screen
000d18 940e 1207                 	call GFX_clear_array
000d1a 940e 0d1e                 	call delay_1s
000d1c 940c 0108                 	jmp loop
                                 
                                 
                                 
                                 .include "lib_delay.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_delay
                                 ; All delays generated by delay loop calculator at http://www.bretmulvey.com/avrdelay.html
                                 ;
                                 ; registers used (and preserverd):
                                 ;   - r23
                                 ;   - r24
                                 ;   - r25
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 15 999 988 cycles
                                 ; 999ms 999us 250 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_1s:
000d1e 937f                                                  push            r23
000d1f 938f                                                  push            r24
000d20 939f                                                  push            r25
000d21 e572                                                  ldi             r23, 82
000d22 e28b                                                  ldi             r24, 43
000d23 ef9d                                                  ldi             r25, 253
                                     delay_1s_cont:          
000d24 959a                                                  dec             r25
000d25 f7f1                                                  brne            delay_1s_cont
000d26 958a                                                  dec             r24
000d27 f7e1                                                  brne            delay_1s_cont
000d28 957a                                                  dec             r23
000d29 f7d1                                                  brne            delay_1s_cont
000d2a 0000                                                  nop
000d2b 919f                                                  pop             r25
000d2c 918f                                                  pop             r24
000d2d 917f                                                  pop             r23
000d2e 9508                                                  ret
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 1 599 988 cycles
                                 ; 99ms 999us 250 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_100ms:
000d2f 937f                                                  push            r23
000d30 938f                                                  push            r24
000d31 939f                                                  push            r25
000d32 e079                                                  ldi             r23, 9
000d33 e18e                                                  ldi             r24, 30
000d34 ee91                                                  ldi             r25, 225
                                     delay_100ms_cont:
000d35 959a                                                  dec             r25
000d36 f7f1                                                  brne            delay_100ms_cont
000d37 958a                                                  dec             r24
000d38 f7e1                                                  brne            delay_100ms_cont
000d39 957a                                                  dec             r23
000d3a f7d1                                                  brne            delay_100ms_cont
000d3b 0000                                                  nop
000d3c 919f                                                  pop             r25
000d3d 918f                                                  pop             r24
000d3e 917f                                                  pop             r23
000d3f 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 15 992 cycles
                                 ; 999us 500 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_1ms:
000d40 937f                                                  push            r23
000d41 938f                                                  push            r24
000d42 e175                                                  ldi             r23, 21
000d43 ec84                                                  ldi             r24, 196
                                     delay_1ms_cont:
000d44 958a                                                  dec             r24
000d45 f7f1                                                  brne            delay_1ms_cont
000d46 957a                                                  dec             r23
000d47 f7e1                                                  brne            delay_1ms_cont
000d48 918f                                                  pop             r24
000d49 917f                                                  pop             r23
000d4a 9508                                                  ret
                                 ; --------------------------------------------------------------------------------
                                 .include "lib_SSD1306_OLED.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_SSD1306_OLED
                                 ; Description: basic control for Adafruit SSD1306 OLED screen (via SPI only).
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: directives
                                 ; --------------------------------------------------------------------------------
                                 .equ                        SPI_MOSI        = PORTB3 ; 11
                                 .equ                        SPI_MISO        = PORTB4 ; 12
                                 .equ                        SPI_CLK         = PORTB5 ; 13
                                 .equ                        OLED_RST        = PORTB1 ; 9
                                 .equ                        OLED_DC         = PORTB0 ; 8
                                 .equ                        OLED_CS         = PORTB2 ; 10
                                 
                                 .equ                        WIDTH           = 128                                   ; adjust your screen dimensions here
                                 .equ                        HEIGHT          = 64                                    ; "
                                 
                                 .include                    "lib_SPI.asm"                                           ; include SPI library
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_SPI
                                 ; Description: control of SPI on ATMega328PB
                                 ; registers used:
                                 ;   - r16: heavy lifter
                                 ;   - r17: data to be sent (during write) or received (during read)
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initializes SPI device as master
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_initialize:
000d4b e500                                                  ldi             r16, (1<<SPE)|(1<<MSTR)                 ; enable SPI to master mode, disable interrupt, set shift
000d4c bd0c                                                  out             SPCR0, r16                              ; rate to 4 MHz, shift data on rising edge, MSB first, SCK idle low
000d4d b50d                                                  in              r16, SPSR0                              ; clear flags and disable double baud rate
000d4e b50e                                                  in              r16, SPDR0                              ; "
000d4f e000                                                  ldi             r16, 0                                  ; clear SPI2X bit
000d50 bd0d                                                  out             SPSR0, r16                              ; "
000d51 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initializes SPI devies as slave
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_initialize:
000d52 e400                                                  ldi             r16, (1<<SPE)|(0<<MSTR)                 ; enable SPI to slave mode, disable interrupt, set shift
000d53 bd0c                                                  out             SPCR0, r16                              ; rate to 4 MHz, shift data on rising edge, MSB first, SCK idle low
000d54 b50d                                                  in              r16, SPSR0                              ; clear flags and disable double baud rate
000d55 b50e                                                  in              r16, SPDR0                              ; "
000d56 e000                                                  ldi             r16, 0                                  ; clear SPI2X bit
000d57 bd0d                                                  out             SPSR0, r16                              ; "
000d58 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sends a byte of information from the master
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - r17: byte to be sent
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_transmit:
000d59 bd1e                                                  out             SPDR0, r17                              ; Start transmission of data
                                     SPI_master_transmit_wait:
000d5a b50d                                                  in              r16, SPSR0
000d5b ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000d5c cffd                                                  rjmp            SPI_master_transmit_wait                ; "
000d5d b50e                                                  in              r16, SPDR0                              ; clear the SPIF flag
000d5e 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: receives a byte of information from the slave (into r17)
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_receive:
000d5f bd0e                                                  out             SPDR0, r16                              ; Start transmission of data
                                     SPI_slave_receive_wait:
000d60 b50d                                                  in              r16, SPSR0
000d61 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000d62 cffd                                                  rjmp            SPI_slave_receive_wait                  ; "
000d63 b51e                                                  in              r17, SPDR0                              ; fetch data and clear SPIF flag
000d64 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sends a byte of infomation from the slave
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - r17: byte to be sent
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_transmit:
000d65 bd1e                                                  out             SPDR0, r17                              ; Start transmission of data
                                     SPI_slave_transmit_wait:
000d66 b50d                                                  in              r16, SPSR0
000d67 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000d68 cffd                                                  rjmp            SPI_slave_transmit_wait                 ; "
000d69 b50e                                                  in              r16, SPDR0                              ; clear the SPIF flag
000d6a 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: receives a byte of infomation from the master (into r17)
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_receive:
000d6b b50d                                                  in              r16, SPSR0
000d6c ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000d6d cffd                                                  rjmp            SPI_slave_receive                       ; "
000d6e b51e                                                  in              r17, SPDR0                              ; clear the SPIF flag
000d6f 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initialises OLED screen.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 OLED_initialize:
000d70 dfda                                                  rcall           SPI_master_initialize
000d71 e20f                                                  ldi             reg_workhorse, (1<<SPI_MOSI)|(1<<SPI_CLK)|(1<<OLED_RST)|(1<<OLED_DC)|(1<<OLED_CS)
000d72 b904                                                  out             DDRB, reg_workhorse
000d73 e000                                                  ldi             reg_workhorse, 0
000d74 b905                                                  out             PORTB, reg_workhorse
                                                             
000d75 9a29                                                  sbi             PORTB, OLED_RST
000d76 dfc9                                                  rcall           delay_1ms
000d77 9829                                                  cbi             PORTB, OLED_RST
000d78 dfc7                                                  rcall           delay_1ms
000d79 9a29                                                  sbi             PORTB, OLED_RST
000d7a dfc5                                                  rcall           delay_1ms
000d7b e6e6                                                  ldi             ZL, low(array_OLED_init_commands<<1)
000d7c e1fb                                                  ldi             ZH, high(array_OLED_init_commands<<1)
                                     OLED_init_cmds:
000d7d 9115                                                  lpm             reg_SPI_data, Z+
000d7e 3f1f                                                  cpi             reg_SPI_data, 0xFF
000d7f f011                                                  breq            OLED_init_end
000d80 d002                                                  rcall           _OLED_write_command
000d81 cffb                                                  rjmp            OLED_init_cmds
                                     OLED_init_end:
000d82 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes a command to one of the screen's registers.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: command
                                 ; --------------------------------------------------------------------------------
                                 _OLED_write_command:
000d83 982a                                                  cbi             PORTB, OLED_CS
000d84 9828                                                  cbi             PORTB, OLED_DC
000d85 dfd3                                                  rcall           SPI_master_transmit
000d86 9a2a                                                  sbi             PORTB, OLED_CS
000d87 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes a byte of data to one of the screen's registers.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: data
                                 ; --------------------------------------------------------------------------------
                                 _OLED_write_data:
000d88 982a                                                  cbi             PORTB, OLED_CS
000d89 9a28                                                  sbi             PORTB, OLED_DC
000d8a dfce                                                  rcall           SPI_master_transmit
000d8b 9a2a                                                  sbi             PORTB, OLED_CS
000d8c 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target x-y location on OLED.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_screen_loc:
000d8d d009                                                  rcall           _OLED_set_page
000d8e d001                                                  rcall           _OLED_set_col
000d8f 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target column.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_col:               
000d90 e211                                                  ldi             r17, 0x21
000d91 dff1                                                  rcall           _OLED_write_command
000d92 2f12                                                  mov             r17, r18
000d93 dfef                                                  rcall           _OLED_write_command
000d94 e71f                                                  ldi             r17, WIDTH-1
000d95 dfed                                                  rcall           _OLED_write_command
000d96 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target page.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: command
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_page:
000d97 e212                                                  ldi             r17, 0x22
000d98 dfea                                                  rcall           _OLED_write_command
000d99 9536                                                  lsr             r19
000d9a 9536                                                  lsr             r19
000d9b 9536                                                  lsr             r19
000d9c 2f13                                                  mov             r17, r19
000d9d dfe5                                                  rcall           _OLED_write_command
000d9e e017                                                  ldi             r17, (HEIGHT-1)/8
000d9f dfe3                                                  rcall           _OLED_write_command
000da0 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes the entire pix array from dmem to OLED.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X pointer: set to start of array location
                                 ; --------------------------------------------------------------------------------
                                 OLED_refresh_screen:
000da1 932f                                                  push            r18
000da2 933f                                                  push            r19
000da3 2722                                                  clr             r18
000da4 2733                                                  clr             r19
                                     OLED_refresh_screen_col:                                                        ; for each col
000da5 3038                                                  cpi             r19, HEIGHT/8
000da6 f448                                                  brcc            OLED_refresh_screen_done
                                         OLED_refresh_screen_row:                                                    ; for each row
000da7 3820                                                  cpi             r18, WIDTH
000da8 f420                                                  brcc            OLED_refresh_screen_nr
000da9 911d                                                  ld              r17, X+
000daa dfdd                                                  rcall           _OLED_write_data
000dab 9523                                                  inc             r18
000dac cffa                                                  rjmp            OLED_refresh_screen_row
                                             OLED_refresh_screen_nr:                                                 ; move to next row
000dad 2722                                                  clr             r18
000dae 9533                                                  inc             r19
000daf cff5                                                  rjmp            OLED_refresh_screen_col
                                     OLED_refresh_screen_done:                                                       ; done drawing array
000db0 913f                                                  pop             r19
000db1 912f                                                  pop             r18
000db2 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initialisation sequence for screen.
                                 ; Nicked from https://github.com/adafruit/Adafruit_SSD1306/blob/master/Adafruit_SSD1306.cpp
                                 ; (Starts on line 543.)
                                 ; Comments below are on separate lines because Atmel Studio doesn't like inline comments on continued lines.
                                 ; --------------------------------------------------------------------------------
                                 array_OLED_init_commands:   .db         0xAE, \
000db3 d5ae                                                              0xD5, 0x80, \
000db4 a880                                                              0xA8, 0x3F, \
000db5 d33f                                                              0xD3, 0x00, \
                                                                         0x40, \
000db6 4000                                                              0x8D, 0x14, \
000db7 148d                                                              0x20, 0x00, \
000db8 0020                                                              0xA1, \
                                                                         0xC8, \
000db9 c8a1                                                              0xDA, 0x12, \
000dba 12da                                                              0x81, 0xCF, \
000dbb cf81                                                              0xD9, 0xF1, \
000dbc f1d9                                                              0xDB, 0x40, \
000dbd 40db                                                              0xA4, \
                                                                         0xA6, \
000dbe a6a4                                                              0x2E, \
                                                                         0xAF, \
000dbf af2e
000dc0 ffff                                                              0xFF, 0xFF
                                 
                                                                         ; set disp (off),
                                                                         ; set disp clock div rat/osc freq
                                                                         ; set mux ratio
                                                                         ; set disp offset
                                                                         ; set disp start line (0)
                                                                         ; enable charge pump reg
                                                                         ; set mem addr mode - horiz
                                                                         ; set seg remap (remapped)
                                                                         ; set COM out scan dir (remapped)
                                                                         ; set com pins hw config
                                                                         ; set contrast ctrl
                                                                         ; set prechrg per
                                                                         ; set Vcom reg out
                                                                         ; entire disp (on)
                                                                         ; set inverse/normal (norm)
                                                                         ; deactivate scroll (deactivate)
                                                                         ; set disp (on)
                                                                         ; END COMMAND SET (my marker)
                                 
                                 ; --------------------------------------------------------------------------------
                                 .include "lib_GFX.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_GFX
                                 ; Description: controls higher-level functionaity for OLED screens.
                                 ; Dependencies:
                                 ;   - HEIGHT .equ (the height of the OLED screen), assigned in main.asm
                                 ;   - WIDTH .equ (the width of the OLED screen), assigned in main.asm
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: reserved space in data memory for pixel array (full screen) and.
                                 ;              sprite array (one 8pixel x 8pixel character)
                                 ; --------------------------------------------------------------------------------
                                 .dseg
000100                           sprite:                     .byte           8                                       ; 8x8 pixel shape used to store sprite
000108                           pixel_array:                .byte           HEIGHT*WIDTH/8                          ; datamem array that is written to screen
                                 .cseg                                                                               ; return to code segment
                                 .include                    "character_map.asm"                                       ; table of ascii pixel char arrays
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; character_map.asm
                                 ; Font: Standard.pf
                                 ; tool to generate this file from https://www.min.at/prinz/o/software/pixelfont/
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
000dc1 0000
000dc2 0000
000dc3 0000
000dc4 0000                      Char_000:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
000dc5 817e
000dc6 b195
000dc7 95b1
000dc8 7e81                      Char_001:                   .db             0x7E, 0x81, 0x95, 0xB1, 0xB1, 0x95, 0x81, 0x7E  ; smileyface
000dc9 ff7e
000dca cfeb
000dcb ebcf
000dcc 7eff                      Char_002:                   .db             0x7E, 0xFF, 0xEB, 0xCF, 0xCF, 0xEB, 0xFF, 0x7E  ; smileyface (inverted)
000dcd 1f0e
000dce 7e3f
000dcf 1f3f
000dd0 000e                      Char_003:                   .db             0x0E, 0x1F, 0x3F, 0x7E, 0x3F, 0x1F, 0x0E, 0x00  ; hearts
000dd1 1c08
000dd2 7f3e
000dd3 1c3e
000dd4 0008                      Char_004:                   .db             0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00  ; diamonds
000dd5 1818
000dd6 6f5b
000dd7 5b6f
000dd8 1818                      Char_005:                   .db             0x18, 0x18, 0x5B, 0x6F, 0x6F, 0x5B, 0x18, 0x18  ; clubs
000dd9 1c18
000dda 6f5e
000ddb 1c5e
000ddc 0018                      Char_006:                   .db             0x18, 0x1C, 0x5E, 0x6F, 0x5E, 0x1C, 0x18, 0x00  ; spades
000ddd 0000
000dde 3c18
000ddf 183c
000de0 0000                      Char_007:                   .db             0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00  ; circle, black
000de1 ffff
000de2 c3e7
000de3 e7c3
000de4 ffff                      Char_008:                   .db             0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF  ; circle, black (inverted)
000de5 3c00
000de6 4266
000de7 6642
000de8 003c                      Char_009:                   .db             0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00  ; circle, white
000de9 c3ff
000dea bd99
000deb 99bd
000dec ffc3                      Char_010:                   .db             0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF  ; circle, white (inverted)
000ded f870
000dee 8888
000def 7ffd
000df0 0f07                      Char_011:                   .db             0x70, 0xF8, 0x88, 0x88, 0xFD, 0x7F, 0x07, 0x0F  ; male symbol
000df1 4e00
000df2 f15f
000df3 5ff1
000df4 004e                      Char_012:                   .db             0x00, 0x4E, 0x5F, 0xF1, 0xF1, 0x5F, 0x4E, 0x00  ; female symbol
000df5 6040
000df6 6060
000df7 023f
000df8 000c                      Char_013:                   .db             0x40, 0x60, 0x60, 0x60, 0x3F, 0x02, 0x0C, 0x00  ; eighth note
000df9 3020
000dfa 9f30
000dfb cac5
000dfc 007c                      Char_014:                   .db             0x20, 0x30, 0x30, 0x9F, 0xC5, 0xCA, 0x7C, 0x00  ; double sixteenth note
000dfd 2a08
000dfe 771c
000dff 2a1c
000e00 0008                      Char_015:                   .db             0x08, 0x2A, 0x1C, 0x77, 0x1C, 0x2A, 0x08, 0x00  ; asterisk
000e01 3e7f
000e02 1c3e
000e03 081c
000e04 0008                      Char_016:                   .db             0x7F, 0x3E, 0x3E, 0x1C, 0x1C, 0x08, 0x08, 0x00  ; triangle, right
000e05 0808
000e06 1c1c
000e07 3e3e
000e08 007f                      Char_017:                   .db             0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x3E, 0x7F, 0x00  ; triange, left
000e09 1400
000e0a 7f22
000e0b 227f
000e0c 0014                      Char_018:                   .db             0x00, 0x14, 0x22, 0x7F, 0x7F, 0x22, 0x14, 0x00  ; arrow, up/down
000e0d 5f00
000e0e 005f
000e0f 5f00
000e10 005f                      Char_019:                   .db             0x00, 0x5F, 0x5F, 0x00, 0x00, 0x5F, 0x5F, 0x00  ; double exclamation point
000e11 1f0e
000e12 7f11
000e13 017f
000e14 7f7f                      Char_020:                   .db             0x0E, 0x1F, 0x11, 0x7F, 0x7F, 0x01, 0x7F, 0x7F  ; pilcrow sign
000e15 9840
000e16 a5a6
000e17 1965
000e18 0002                      Char_021:                   .db             0x40, 0x98, 0xA6, 0xA5, 0x65, 0x19, 0x02, 0x00  ; section sign
000e19 7000
000e1a 7070
000e1b 7070
000e1c 0070                      Char_022:                   .db             0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00  ; heavy low dash
000e1d 9400
000e1e ffa2
000e1f a2ff
000e20 0094                      Char_023:                   .db             0x00, 0x94, 0xA2, 0xFF, 0xFF, 0xA2, 0x94, 0x00  ; arrow, up/down with underscore
000e21 0400
000e22 7f02
000e23 027f
000e24 0004                      Char_024:                   .db             0x00, 0x04, 0x02, 0x7F, 0x7F, 0x02, 0x04, 0x00  ; arrow, up
000e25 1000
000e26 7f20
000e27 207f
000e28 0010                      Char_025:                   .db             0x00, 0x10, 0x20, 0x7F, 0x7F, 0x20, 0x10, 0x00  ; arrow, down
000e29 0808
000e2a 2a08
000e2b 1c3e
000e2c 0008                      Char_026:                   .db             0x08, 0x08, 0x08, 0x2A, 0x3E, 0x1C, 0x08, 0x00  ; arrow, right
000e2d 1c08
000e2e 2a3e
000e2f 0808
000e30 0008                      Char_027:                   .db             0x08, 0x1C, 0x3E, 0x2A, 0x08, 0x08, 0x08, 0x00  ; arrow, left
000e31 3c3c
000e32 2020
000e33 2020
000e34 0020                      Char_028:                   .db             0x3C, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00  ; righthand interior product
000e35 1c08
000e36 082a
000e37 2a08
000e38 081c                      Char_029:                   .db             0x08, 0x1C, 0x2A, 0x08, 0x08, 0x2A, 0x1C, 0x08  ; arrow, left/right
000e39 3830
000e3a 3e3c
000e3b 383c
000e3c 0030                      Char_030:                   .db             0x30, 0x38, 0x3C, 0x3E, 0x3C, 0x38, 0x30, 0x00  ; triangle, up
000e3d 0e06
000e3e 3e1e
000e3f 0e1e
000e40 0006                      Char_031:                   .db             0x06, 0x0E, 0x1E, 0x3E, 0x1E, 0x0E, 0x06, 0x00  ; triangle, down
000e41 0000
000e42 0000
000e43 0000
000e44 0000                      Char_032:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
000e45 0000
000e46 5f06
000e47 065f
000e48 0000                      Char_033:                   .db             0x00, 0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00  ; !
000e49 0100
000e4a 0007
000e4b 0701
000e4c 0000                      Char_034:                   .db             0x00, 0x01, 0x07, 0x00, 0x01, 0x07, 0x00, 0x00  ; "
000e4d 7f14
000e4e 147f
000e4f 7f7f
000e50 0014                      Char_035:                   .db             0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00  ; #
000e51 2e24
000e52 7f2a
000e53 3a2a
000e54 0010                      Char_036:                   .db             0x24, 0x2E, 0x2A, 0x7F, 0x2A, 0x3A, 0x10, 0x00  ; $
000e55 6a4c
000e56 1836
000e57 566c
000e58 0032                      Char_037:                   .db             0x4C, 0x6A, 0x36, 0x18, 0x6C, 0x56, 0x32, 0x00  ; %
000e59 7a30
000e5a 4d4d
000e5b 327f
000e5c 0050                      Char_038:                   .db             0x30, 0x7A, 0x4D, 0x4D, 0x7F, 0x32, 0x50, 0x00  ; &
000e5d 0000
000e5e 0305
000e5f 0000
000e60 0000                      Char_039:                   .db             0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00  ; '
000e61 1c00
000e62 633e
000e63 0041
000e64 0000                      Char_040:                   .db             0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00  ; (
000e65 4100
000e66 3e63
000e67 001c
000e68 0000                      Char_041:                   .db             0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00  ; )
000e69 2a08
000e6a 1c3e
000e6b 3e1c
000e6c 082a                      Char_042:                   .db             0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08  ; *
000e6d 0808
000e6e 3e3e
000e6f 0808
000e70 0000                      Char_043:                   .db             0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00  ; +
000e71 0000
000e72 60a0
000e73 0000
000e74 0000                      Char_044:                   .db             0x00, 0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00  ; ,
000e75 0808
000e76 0808
000e77 0808
000e78 0000                      Char_045:                   .db             0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00  ; -
000e79 0000
000e7a 4040
000e7b 0000
000e7c 0000                      Char_046:                   .db             0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00  ; .
000e7d 6040
000e7e 1830
000e7f 060c
000e80 0003                      Char_047:                   .db             0x40, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00  ; /
000e81 7f3e
000e82 4d79
000e83 7f47
000e84 003e                      Char_048:                   .db             0x3E, 0x7F, 0x79, 0x4D, 0x47, 0x7F, 0x3E, 0x00  ; 0
000e85 4400
000e86 7f46
000e87 407f
000e88 0040                      Char_049:                   .db             0x00, 0x44, 0x46, 0x7F, 0x7F, 0x40, 0x40, 0x00  ; 1
000e89 7362
000e8a 5951
000e8b 6f49
000e8c 0066                      Char_050:                   .db             0x62, 0x73, 0x51, 0x59, 0x49, 0x6F, 0x66, 0x00  ; 2
000e8d 6322
000e8e 4949
000e8f 7f49
000e90 0036                      Char_051:                   .db             0x22, 0x63, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00  ; 3
000e91 1c18
000e92 5316
000e93 7f7f
000e94 0050                      Char_052:                   .db             0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00  ; 4
000e95 6727
000e96 4545
000e97 7d45
000e98 0039                      Char_053:                   .db             0x27, 0x67, 0x45, 0x45, 0x45, 0x7D, 0x39, 0x00  ; 5
000e99 7f3e
000e9a 4949
000e9b 7b49
000e9c 0032                      Char_054:                   .db             0x3E, 0x7F, 0x49, 0x49, 0x49, 0x7B, 0x32, 0x00  ; 6
000e9d 0303
000e9e 7971
000e9f 070d
000ea0 0003                      Char_055:                   .db             0x03, 0x03, 0x71, 0x79, 0x0D, 0x07, 0x03, 0x00  ; 7
000ea1 7f36
000ea2 4949
000ea3 7f49
000ea4 0036                      Char_056:                   .db             0x36, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00  ; 8
000ea5 6f26
000ea6 4949
000ea7 7f49
000ea8 003e                      Char_057:                   .db             0x26, 0x6F, 0x49, 0x49, 0x49, 0x7F, 0x3E, 0x00  ; 9
000ea9 0000
000eaa 2222
000eab 0000
000eac 0000                      Char_058:                   .db             0x00, 0x00, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00  ; :
000ead 0000
000eae 62a2
000eaf 0000
000eb0 0000                      Char_059:                   .db             0x00, 0x00, 0xA2, 0x62, 0x00, 0x00, 0x00, 0x00  ; ;
000eb1 0800
000eb2 361c
000eb3 4163
000eb4 0000                      Char_060:                   .db             0x00, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00  ; <
000eb5 2400
000eb6 2424
000eb7 2424
000eb8 0024                      Char_061:                   .db             0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00  ; =
000eb9 4100
000eba 3663
000ebb 081c
000ebc 0000                      Char_062:                   .db             0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00  ; >
000ebd 0302
000ebe 5951
000ebf 060f
000ec0 0000                      Char_063:                   .db             0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00  ; ?
000ec1 413e
000ec2 5549
000ec3 5d55
000ec4 001e                      Char_064:                   .db             0x3E, 0x41, 0x49, 0x55, 0x55, 0x5D, 0x1E, 0x00  ; @
000ec5 7f7e
000ec6 0909
000ec7 7f09
000ec8 007e                      Char_065:                   .db             0x7E, 0x7F, 0x09, 0x09, 0x09, 0x7F, 0x7E, 0x00  ; A
000ec9 7f41
000eca 497f
000ecb 7f49
000ecc 0036                      Char_066:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00  ; B
000ecd 7f3e
000ece 4141
000ecf 6341
000ed0 0022                      Char_067:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x41, 0x63, 0x22, 0x00  ; C
000ed1 7f41
000ed2 417f
000ed3 7f41
000ed4 003e                      Char_068:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00  ; D
000ed5 7f41
000ed6 497f
000ed7 415d
000ed8 0063                      Char_069:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00  ; E
000ed9 7f41
000eda 497f
000edb 011d
000edc 0003                      Char_070:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00  ; F
000edd 7f3e
000ede 4141
000edf 7751
000ee0 0076                      Char_071:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x51, 0x77, 0x76, 0x00  ; G
000ee1 7f7f
000ee2 0808
000ee3 7f08
000ee4 007f                      Char_072:                   .db             0x7F, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x7F, 0x00  ; H
000ee5 0000
000ee6 7f41
000ee7 417f
000ee8 0000                      Char_073:                   .db             0x00, 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00  ; I
000ee9 7030
000eea 4140
000eeb 3f7f
000eec 0001                      Char_074:                   .db             0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00  ; J
000eed 7f41
000eee 087f
000eef 771c
000ef0 0063                      Char_075:                   .db             0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00  ; K
000ef1 7f41
000ef2 417f
000ef3 6040
000ef4 0070                      Char_076:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00  ; L
000ef5 7e7f
000ef6 180c
000ef7 7e0c
000ef8 007f                      Char_077:                   .db             0x7F, 0x7E, 0x0C, 0x18, 0x0C, 0x7E, 0x7F, 0x00  ; M
000ef9 7f7f
000efa 0c06
000efb 7f18
000efc 007f                      Char_078:                   .db             0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00  ; N
000efd 7f3e
000efe 4141
000eff 7f41
000f00 003e                      Char_079:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x41, 0x7F, 0x3E, 0x00  ; O
000f01 7f41
000f02 497f
000f03 0f09
000f04 0006                      Char_080:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00  ; P
000f05 7f3e
000f06 7141
000f07 ff61
000f08 00be                      Char_081:                   .db             0x3E, 0x7F, 0x41, 0x71, 0x61, 0xFF, 0xBE, 0x00  ; Q
000f09 7f41
000f0a 097f
000f0b 7f09
000f0c 0076                      Char_082:                   .db             0x41, 0x7F, 0x7F, 0x09, 0x09, 0x7F, 0x76, 0x00  ; R
000f0d 6f26
000f0e 4949
000f0f 7b49
000f10 0032                      Char_083:                   .db             0x26, 0x6F, 0x49, 0x49, 0x49, 0x7B, 0x32, 0x00  ; S
000f11 0700
000f12 7f41
000f13 417f
000f14 0007                      Char_084:                   .db             0x00, 0x07, 0x41, 0x7F, 0x7F, 0x41, 0x07, 0x00  ; T
000f15 7f3f
000f16 4040
000f17 7f40
000f18 003f                      Char_085:                   .db             0x3F, 0x7F, 0x40, 0x40, 0x40, 0x7F, 0x3F, 0x00  ; U
000f19 1f0f
000f1a 6030
000f1b 1f30
000f1c 000f                      Char_086:                   .db             0x0F, 0x1F, 0x30, 0x60, 0x30, 0x1F, 0x0F, 0x00  ; V
000f1d 3f7f
000f1e 0c18
000f1f 3f18
000f20 007f                      Char_087:                   .db             0x7F, 0x3F, 0x18, 0x0C, 0x18, 0x3F, 0x7F, 0x00  ; W
000f21 6341
000f22 1c3e
000f23 633e
000f24 0041                      Char_088:                   .db             0x41, 0x63, 0x3E, 0x1C, 0x3E, 0x63, 0x41, 0x00  ; X
000f25 0700
000f26 784f
000f27 4f78
000f28 0007                      Char_089:                   .db             0x00, 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00  ; Y
000f29 6347
000f2a 5971
000f2b 674d
000f2c 0073                      Char_090:                   .db             0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00  ; Z
000f2d 7f00
000f2e 417f
000f2f 0041
000f30 0000                      Char_091:                   .db             0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00  ; [
000f31 0301
000f32 0c06
000f33 3018
000f34 0060                      Char_092:                   .db             0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00  ; \
000f35 4100
000f36 7f41
000f37 007f
000f38 0000                      Char_093:                   .db             0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00  ; ]
000f39 0c08
000f3a 0306
000f3b 0c06
000f3c 0008                      Char_094:                   .db             0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00  ; ^
000f3d 8080
000f3e 8080
000f3f 8080
000f40 8080                      Char_095:                   .db             0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80  ; _
000f41 0000
000f42 0503
000f43 0000
000f44 0000                      Char_096:                   .db             0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00  ; `
000f45 7420
000f46 5454
000f47 783c
000f48 0040                      Char_097:                   .db             0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00  ; a
000f49 7f01
000f4a 487f
000f4b 7848
000f4c 0030                      Char_098:                   .db             0x01, 0x7F, 0x7F, 0x48, 0x48, 0x78, 0x30, 0x00  ; b
000f4d 7c38
000f4e 4444
000f4f 6c44
000f50 0028                      Char_099:                   .db             0x38, 0x7C, 0x44, 0x44, 0x44, 0x6C, 0x28, 0x00  ; c
000f51 7830
000f52 4948
000f53 7f3f
000f54 0040                      Char_100:                   .db             0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00  ; d
000f55 7c38
000f56 5454
000f57 5c54
000f58 0018                      Char_101:                   .db             0x38, 0x7C, 0x54, 0x54, 0x54, 0x5C, 0x18, 0x00  ; e
000f59 4800
000f5a 7f7e
000f5b 0349
000f5c 0002                      Char_102:                   .db             0x00, 0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00  ; f
000f5d bc18
000f5e a4a4
000f5f 7cf8
000f60 0004                      Char_103:                   .db             0x18, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00  ; g
000f61 7f41
000f62 087f
000f63 7c04
000f64 0078                      Char_104:                   .db             0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00  ; h
000f65 0000
000f66 7d44
000f67 407d
000f68 0000                      Char_105:                   .db             0x00, 0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00  ; i
000f69 c040
000f6a 8880
000f6b 7afa
000f6c 0000                      Char_106:                   .db             0x40, 0xC0, 0x80, 0x88, 0xFA, 0x7A, 0x00, 0x00  ; j
000f6d 7f41
000f6e 107f
000f6f 6c38
000f70 0044                      Char_107:                   .db             0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00  ; k
000f71 0000
000f72 7f41
000f73 407f
000f74 0000                      Char_108:                   .db             0x00, 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00  ; l
000f75 7c7c
000f76 7808
000f77 7c0c
000f78 0078                      Char_109:                   .db             0x7C, 0x7C, 0x08, 0x78, 0x0C, 0x7C, 0x78, 0x00  ; m
000f79 7c04
000f7a 0478
000f7b 7c04
000f7c 0078                      Char_110:                   .db             0x04, 0x7C, 0x78, 0x04, 0x04, 0x7C, 0x78, 0x00  ; n
000f7d 7c38
000f7e 4444
000f7f 7c44
000f80 0038                      Char_111:                   .db             0x38, 0x7C, 0x44, 0x44, 0x44, 0x7C, 0x38, 0x00  ; o
000f81 fc84
000f82 a4f8
000f83 3c24
000f84 0018                      Char_112:                   .db             0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00  ; p
000f85 3c18
000f86 a424
000f87 fcfc
000f88 0080                      Char_113:                   .db             0x18, 0x3C, 0x24, 0xA4, 0xFC, 0xFC, 0x80, 0x00  ; q
000f89 7c44
000f8a 4c78
000f8b 0c04
000f8c 000c                      Char_114:                   .db             0x44, 0x7C, 0x78, 0x4C, 0x04, 0x0C, 0x0C, 0x00  ; r
000f8d 5c08
000f8e 5454
000f8f 7454
000f90 0020                      Char_115:                   .db             0x08, 0x5C, 0x54, 0x54, 0x54, 0x74, 0x20, 0x00  ; s
000f91 0404
000f92 7f3e
000f93 2444
000f94 0000                      Char_116:                   .db             0x04, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00  ; t
000f95 7c3c
000f96 4040
000f97 7c3c
000f98 0040                      Char_117:                   .db             0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00  ; u
000f99 1c0c
000f9a 6030
000f9b 1c30
000f9c 000c                      Char_118:                   .db             0x0C, 0x1C, 0x30, 0x60, 0x30, 0x1C, 0x0C, 0x00  ; v
000f9d 7c3c
000f9e 3860
000f9f 7c60
000fa0 003c                      Char_119:                   .db             0x3C, 0x7C, 0x60, 0x38, 0x60, 0x7C, 0x3C, 0x00  ; w
000fa1 6c44
000fa2 1038
000fa3 6c38
000fa4 0044                      Char_120:                   .db             0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00  ; x
000fa5 bc9c
000fa6 a0a0
000fa7 7cfc
000fa8 0000                      Char_121:                   .db             0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00  ; y
000fa9 644c
000faa 5c74
000fab 644c
000fac 0000                      Char_122:                   .db             0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00  ; z
000fad 0000
000fae 3e08
000faf 4177
000fb0 0041                      Char_123:                   .db             0x00, 0x00, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00  ; {
000fb1 0000
000fb2 7700
000fb3 0077
000fb4 0000                      Char_124:                   .db             0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00  ; |
000fb5 4141
000fb6 3e77
000fb7 0008
000fb8 0000                      Char_125:                   .db             0x41, 0x41, 0x77, 0x3E, 0x08, 0x00, 0x00, 0x00  ; }
000fb9 0302
000fba 0301
000fbb 0302
000fbc 0001                      Char_126:                   .db             0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00  ; ~
000fbd 7870
000fbe 464c
000fbf 784c
000fc0 0070                      Char_127:                   .db             0x70, 0x78, 0x4C, 0x46, 0x4C, 0x78, 0x70, 0x00  ; Delta
000fc1 bf1e
000fc2 e1a1
000fc3 3361
000fc4 0012                      Char_128:                   .db             0x1E, 0xBF, 0xA1, 0xE1, 0x61, 0x33, 0x12, 0x00  ; C with cedilla
000fc5 7d3d
000fc6 4040
000fc7 7d3d
000fc8 0040                      Char_129:                   .db             0x3D, 0x7D, 0x40, 0x40, 0x3D, 0x7D, 0x40, 0x00  ; u with diaeresis
000fc9 7c38
000fca 5654
000fcb 5d55
000fcc 0019                      Char_130:                   .db             0x38, 0x7C, 0x54, 0x56, 0x55, 0x5D, 0x19, 0x00  ; e with acute
000fcd 7122
000fce 5555
000fcf 793d
000fd0 0042                      Char_131:                   .db             0x22, 0x71, 0x55, 0x55, 0x3D, 0x79, 0x42, 0x00  ; a with circumflex
000fd1 7521
000fd2 5454
000fd3 793d
000fd4 0040                      Char_132:                   .db             0x21, 0x75, 0x54, 0x54, 0x3D, 0x79, 0x40, 0x00  ; a with diaeresis
000fd5 7521
000fd6 5655
000fd7 783c
000fd8 0040                      Char_133:                   .db             0x21, 0x75, 0x55, 0x56, 0x3C, 0x78, 0x40, 0x00  ; a with grave
000fd9 7420
000fda 5757
000fdb 783c
000fdc 0040                      Char_134:                   .db             0x20, 0x74, 0x57, 0x57, 0x3C, 0x78, 0x40, 0x00  ; a with ring
000fdd bc18
000fde e4a4
000fdf 2464
000fe0 0000                      Char_135:                   .db             0x18, 0xBC, 0xA4, 0xE4, 0x64, 0x24, 0x00, 0x00  ; c with cedilla
000fe1 7d3a
000fe2 5555
000fe3 5d55
000fe4 001a                      Char_136:                   .db             0x3A, 0x7D, 0x55, 0x55, 0x55, 0x5D, 0x1A, 0x00  ; e with circumflex
000fe5 7d39
000fe6 5454
000fe7 5d54
000fe8 0019                      Char_137:                   .db             0x39, 0x7D, 0x54, 0x54, 0x54, 0x5D, 0x19, 0x00  ; e with diaeresis
000fe9 7d39
000fea 5655
000feb 5c54
000fec 0018                      Char_138:                   .db             0x39, 0x7D, 0x55, 0x56, 0x54, 0x5C, 0x18, 0x00  ; e with grave
000fed 0100
000fee 7c45
000fef 417c
000ff0 0001                      Char_139:                   .db             0x00, 0x01, 0x45, 0x7C, 0x7C, 0x41, 0x01, 0x00  ; i with diaeresis
000ff1 0102
000ff2 7d45
000ff3 417d
000ff4 0002                      Char_140:                   .db             0x02, 0x01, 0x45, 0x7D, 0x7D, 0x41, 0x02, 0x00  ; i with circumflex
000ff5 0101
000ff6 7e45
000ff7 407c
000ff8 0000                      Char_141:                   .db             0x01, 0x01, 0x45, 0x7E, 0x7C, 0x40, 0x00, 0x00  ; i with grave
000ff9 7d79
000ffa 1414
000ffb 7d14
000ffc 0079                      Char_142:                   .db             0x79, 0x7D, 0x14, 0x14, 0x14, 0x7D, 0x79, 0x00  ; A with diaeresis
000ffd 7c78
000ffe 1717
000fff 7c17
001000 0078                      Char_143:                   .db             0x78, 0x7C, 0x17, 0x17, 0x17, 0x7C, 0x78, 0x00  ; A with ring
001001 7c44
001002 567c
001003 4555
001004 0045                      Char_144:                   .db             0x44, 0x7C, 0x7C, 0x56, 0x55, 0x45, 0x45, 0x00  ; E with grave
001005 7420
001006 7c54
001007 5454
001008 0058                      Char_145:                   .db             0x20, 0x74, 0x54, 0x7C, 0x54, 0x54, 0x58, 0x00  ; ae
001009 7f7e
00100a 0909
00100b 497f
00100c 0049                      Char_146:                   .db             0x7E, 0x7F, 0x09, 0x09, 0x7F, 0x49, 0x49, 0x00  ; AE
00100d 7d3a
00100e 4545
00100f 7d45
001010 003a                      Char_147:                   .db             0x3A, 0x7D, 0x45, 0x45, 0x45, 0x7D, 0x3A, 0x00  ; o with circumflex
001011 7d39
001012 4444
001013 7d44
001014 0039                      Char_148:                   .db             0x39, 0x7D, 0x44, 0x44, 0x44, 0x7D, 0x39, 0x00  ; o with diaeresis
001015 7d39
001016 4645
001017 7c44
001018 0038                      Char_149:                   .db             0x39, 0x7D, 0x45, 0x46, 0x44, 0x7C, 0x38, 0x00  ; o with grave
001019 7d3e
00101a 4141
00101b 7d3d
00101c 0042                      Char_150:                   .db             0x3E, 0x7D, 0x41, 0x41, 0x3D, 0x7D, 0x42, 0x00  ; u with circumflex
00101d 7d3d
00101e 4241
00101f 7c3c
001020 0040                      Char_151:                   .db             0x3D, 0x7D, 0x41, 0x42, 0x3C, 0x7C, 0x40, 0x00  ; u with grave
001021 bd9d
001022 a0a0
001023 7dfd
001024 0000                      Char_152:                   .db             0x9D, 0xBD, 0xA0, 0xA0, 0xFD, 0x7D, 0x00, 0x00  ; y with diaeresis
001025 7f3d
001026 4242
001027 7f42
001028 003d                      Char_153:                   .db             0x3D, 0x7F, 0x42, 0x42, 0x42, 0x7F, 0x3D, 0x00  ; O with diaeresis
001029 7d3d
00102a 4040
00102b 7d40
00102c 003d                      Char_154:                   .db             0x3D, 0x7D, 0x40, 0x40, 0x40, 0x7D, 0x3D, 0x00  ; U with diaeresis
00102d 3e1c
00102e 7f22
00102f 3663
001030 0014                      Char_155:                   .db             0x1C, 0x3E, 0x22, 0x7F, 0x63, 0x36, 0x14, 0x00  ; cent sign
001031 7e68
001032 693f
001033 4243
001034 0020                      Char_156:                   .db             0x68, 0x7E, 0x3F, 0x69, 0x43, 0x42, 0x20, 0x00  ; pound sign
001035 2900
001036 7e2b
001037 2b7e
001038 0029                      Char_157:                   .db             0x00, 0x29, 0x2B, 0x7E, 0x7E, 0x2B, 0x29, 0x00  ; yen sign
001039 7f7f
00103a 2505
00103b fa77
00103c 00a0                      Char_158:                   .db             0x7F, 0x7F, 0x05, 0x25, 0x77, 0xFA, 0xA0, 0x00  ; P sub t
00103d c040
00103e fe88
00103f 097f
001040 0203                      Char_159:                   .db             0x40, 0xC0, 0x88, 0xFE, 0x7F, 0x09, 0x03, 0x02  ; function
001041 7420
001042 5654
001043 793d
001044 0041                      Char_160:                   .db             0x20, 0x74, 0x54, 0x56, 0x3D, 0x79, 0x41, 0x00  ; a with acute
001045 0000
001046 7e44
001047 417d
001048 0001                      Char_161:                   .db             0x00, 0x00, 0x44, 0x7E, 0x7D, 0x41, 0x01, 0x00  ; i with acute
001049 7c38
00104a 4644
00104b 7d45
00104c 0039                      Char_162:                   .db             0x38, 0x7C, 0x44, 0x46, 0x45, 0x7D, 0x39, 0x00  ; o with acute
00104d 7c3c
00104e 4240
00104f 7d3d
001050 0041                      Char_163:                   .db             0x3C, 0x7C, 0x40, 0x42, 0x3D, 0x7D, 0x41, 0x00  ; u with acute
001051 7d06
001052 0679
001053 7d06
001054 0079                      Char_164:                   .db             0x06, 0x7D, 0x79, 0x06, 0x06, 0x7D, 0x79, 0x00  ; n with tilde
001055 7d7e
001056 1a0d
001057 7d32
001058 007d                      Char_165:                   .db             0x7E, 0x7D, 0x0D, 0x1A, 0x32, 0x7D, 0x7D, 0x00  ; N with tilde
001059 2000
00105a 2d2d
00105b 2e27
00105c 0020                      Char_166:                   .db             0x00, 0x20, 0x2D, 0x2D, 0x27, 0x2E, 0x20, 0x00  ; a superscript, underlined
00105d 2600
00105e 292f
00105f 262f
001060 0000                      Char_167:                   .db             0x00, 0x26, 0x2F, 0x29, 0x2F, 0x26, 0x00, 0x00  ; o superscript, underlined
001061 7830
001062 454d
001063 7040
001064 0030                      Char_168:                   .db             0x30, 0x78, 0x4D, 0x45, 0x40, 0x70, 0x30, 0x00  ; ? (upside down)
001065 3838
001066 0808
001067 0808
001068 0000                      Char_169:                   .db             0x38, 0x38, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00  ; logic negation, reversed
001069 0808
00106a 0808
00106b 3838
00106c 0000                      Char_170:                   .db             0x08, 0x08, 0x08, 0x08, 0x38, 0x38, 0x00, 0x00  ; logic negation
00106d 1f2f
00106e 4c08
00106f 786a
001070 0058                      Char_171:                   .db             0x2F, 0x1F, 0x08, 0x4C, 0x6A, 0x78, 0x58, 0x00  ; 1/2
001071 1f2f
001072 3428
001073 787a
001074 0020                      Char_172:                   .db             0x2F, 0x1F, 0x28, 0x34, 0x7A, 0x78, 0x20, 0x00  ; 1/4
001075 0000
001076 7d30
001077 307d
001078 0000                      Char_173:                   .db             0x00, 0x00, 0x30, 0x7D, 0x7D, 0x30, 0x00, 0x00  ; ! (upside down)
001079 1c08
00107a 2a36
00107b 361c
00107c 0022                      Char_174:                   .db             0x08, 0x1C, 0x36, 0x2A, 0x1C, 0x36, 0x22, 0x00  ; double less than
00107d 3622
00107e 2a1c
00107f 1c36
001080 0008                      Char_175:                   .db             0x22, 0x36, 0x1C, 0x2A, 0x36, 0x1C, 0x08, 0x00  ; double greater than
001081 00aa
001082 0055
001083 00aa
001084 0055                      Char_176:                   .db             0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00  ; gradient, light
001085 55aa
001086 55aa
001087 55aa
001088 55aa                      Char_177:                   .db             0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55  ; gradient, medium
001089 ffdd
00108a 77aa
00108b aadd
00108c 77ff                      Char_178:                   .db             0xDD, 0xFF, 0xAA, 0x77, 0xDD, 0xAA, 0xFF, 0x77  ; gradient, heavy
00108d 0000
00108e ff00
00108f 00ff
001090 0000                      Char_179:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single
001091 1010
001092 ff10
001093 00ff
001094 0000                      Char_180:                   .db             0x10, 0x10, 0x10, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single left single 
001095 1414
001096 ff14
001097 00ff
001098 0000                      Char_181:                   .db             0x14, 0x14, 0x14, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single left double
001099 1010
00109a ffff
00109b ff00
00109c 00ff                      Char_182:                   .db             0x10, 0x10, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double left single
00109d 1010
00109e f0f0
00109f f010
0010a0 00f0                      Char_183:                   .db             0x10, 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x00  ; line, left single down double
0010a1 1414
0010a2 fc14
0010a3 00fc
0010a4 0000                      Char_184:                   .db             0x14, 0x14, 0x14, 0xFC, 0xFC, 0x00, 0x00, 0x00  ; line, left double down single
0010a5 1414
0010a6 f7f7
0010a7 ff00
0010a8 00ff                      Char_185:                   .db             0x14, 0x14, 0xF7, 0xF7, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double left double
0010a9 0000
0010aa ffff
0010ab ff00
0010ac 00ff                      Char_186:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double
0010ad 1414
0010ae f4f4
0010af fc04
0010b0 00fc                      Char_187:                   .db             0x14, 0x14, 0xF4, 0xF4, 0x04, 0xFC, 0xFC, 0x00  ; line, left double down double
0010b1 1414
0010b2 1717
0010b3 1f10
0010b4 001f                      Char_188:                   .db             0x14, 0x14, 0x17, 0x17, 0x10, 0x1F, 0x1F, 0x00  ; line, left double up double
0010b5 1010
0010b6 1f1f
0010b7 1f10
0010b8 001f                      Char_189:                   .db             0x10, 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x00  ; line, left single up double
0010b9 1414
0010ba 1f14
0010bb 001f
0010bc 0000                      Char_190:                   .db             0x14, 0x14, 0x14, 0x1F, 0x1F, 0x00, 0x00, 0x00  ; line, left double up single
0010bd 1010
0010be f010
0010bf 00f0
0010c0 0000                      Char_191:                   .db             0x10, 0x10, 0x10, 0xF0, 0xF0, 0x00, 0x00, 0x00  ; line, left single down single
0010c1 0000
0010c2 1f00
0010c3 101f
0010c4 1010                      Char_192:                   .db             0x00, 0x00, 0x00, 0x1F, 0x1F, 0x10, 0x10, 0x10  ; line, up single right single
0010c5 1010
0010c6 1f10
0010c7 101f
0010c8 1010                      Char_193:                   .db             0x10, 0x10, 0x10, 0x1F, 0x1F, 0x10, 0x10, 0x10  ; line, horizontal single up single
0010c9 1010
0010ca f010
0010cb 10f0
0010cc 1010                      Char_194:                   .db             0x10, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0x10  ; line, horizontal single down single
0010cd 0000
0010ce ff00
0010cf 10ff
0010d0 1010                      Char_195:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x10, 0x10, 0x10  ; line, vertical single right single
0010d1 1010
0010d2 1010
0010d3 1010
0010d4 1010                      Char_196:                   .db             0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10  ; line, horizontal
0010d5 1010
0010d6 ff10
0010d7 10ff
0010d8 1010                      Char_197:                   .db             0x10, 0x10, 0x10, 0xFF, 0xFF, 0x10, 0x10, 0x10  ; line, horizontal single vertical single
0010d9 0000
0010da ff00
0010db 14ff
0010dc 1414                      Char_198:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x14, 0x14, 0x14  ; line, vertical single right double
0010dd 0000
0010de ffff
0010df ff00
0010e0 10ff                      Char_199:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x10  ; line, vertical double right single
0010e1 0000
0010e2 1f1f
0010e3 1710
0010e4 1417                      Char_200:                   .db             0x00, 0x00, 0x1F, 0x1F, 0x10, 0x17, 0x17, 0x14  ; line, up double right double
0010e5 0000
0010e6 fcfc
0010e7 f404
0010e8 14f4                      Char_201:                   .db             0x00, 0x00, 0xFC, 0xFC, 0x04, 0xF4, 0xF4, 0x14  ; line, right double down double
0010e9 1414
0010ea 1717
0010eb 1710
0010ec 1417                      Char_202:                   .db             0x14, 0x14, 0x17, 0x17, 0x10, 0x17, 0x17, 0x14  ; line, horizontal double up double
0010ed 1414
0010ee f4f4
0010ef f404
0010f0 14f4                      Char_203:                   .db             0x14, 0x14, 0xF4, 0xF4, 0x04, 0xF4, 0xF4, 0x14  ; line, horizontal double down double
0010f1 0000
0010f2 ffff
0010f3 f700
0010f4 14f7                      Char_204:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xF7, 0xF7, 0x14  ; line, vertical double right double
0010f5 1414
0010f6 1414
0010f7 1414
0010f8 1414                      Char_205:                   .db             0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14  ; line, horizontal double
0010f9 1414
0010fa f7f7
0010fb f700
0010fc 14f7                      Char_206:                   .db             0x14, 0x14, 0xF7, 0xF7, 0x00, 0xF7, 0xF7, 0x14  ; line, horizontal double vertical double
0010fd 1414
0010fe 1714
0010ff 1417
001100 1414                      Char_207:                   .db             0x14, 0x14, 0x14, 0x17, 0x17, 0x14, 0x14, 0x14  ; line, horizontal double up single
001101 1010
001102 1f1f
001103 1f10
001104 101f                      Char_208:                   .db             0x10, 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10  ; line, horizontal single up double
001105 1414
001106 f414
001107 14f4
001108 1414                      Char_209:                   .db             0x14, 0x14, 0x14, 0xF4, 0xF4, 0x14, 0x14, 0x14  ; line, horizontal double down single
001109 1010
00110a f0f0
00110b f010
00110c 10f0                      Char_210:                   .db             0x10, 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10  ; line, horizontal single down double
00110d 0000
00110e 1f1f
00110f 1f10
001110 101f                      Char_211:                   .db             0x00, 0x00, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10  ; line, up double right single
001111 0000
001112 1f00
001113 141f
001114 1414                      Char_212:                   .db             0x00, 0x00, 0x00, 0x1F, 0x1F, 0x14, 0x14, 0x14  ; line, up single right double
001115 0000
001116 fc00
001117 14fc
001118 1414                      Char_213:                   .db             0x00, 0x00, 0x00, 0xFC, 0xFC, 0x14, 0x14, 0x14  ; line, right double down single
001119 0000
00111a f0f0
00111b f010
00111c 10f0                      Char_214:                   .db             0x00, 0x00, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10  ; line, right single down double
00111d 1010
00111e ffff
00111f ff10
001120 10ff                      Char_215:                   .db             0x10, 0x10, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0x10  ; line, horizontal single vertical double
001121 1414
001122 ff14
001123 14ff
001124 1414                      Char_216:                   .db             0x14, 0x14, 0x14, 0xFF, 0xFF, 0x14, 0x14, 0x14  ; line, horizontal double vertical single
001125 1010
001126 1f10
001127 001f
001128 0000                      Char_217:                   .db             0x10, 0x10, 0x10, 0x1F, 0x1F, 0x00, 0x00, 0x00  ; line, up single left single
001129 0000
00112a f000
00112b 10f0
00112c 1010                      Char_218:                   .db             0x00, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0x10  ; line, right single down single
00112d ffff
00112e ffff
00112f ffff
001130 ffff                      Char_219:                   .db             0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF  ; block, black
001131 f0f0
001132 f0f0
001133 f0f0
001134 f0f0                      Char_220:                   .db             0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0  ; block, top white bottom black
001135 ffff
001136 ffff
001137 0000
001138 0000                      Char_221:                   .db             0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00  ; block, left black right white
001139 0000
00113a 0000
00113b ffff
00113c ffff                      Char_222:                   .db             0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF  ; block, left white right black
00113d 0f0f
00113e 0f0f
00113f 0f0f
001140 0f0f                      Char_223:                   .db             0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F  ; block, top black bottom white
001141 7c38
001142 6444
001143 6c38
001144 0040                      Char_224:                   .db             0x38, 0x7C, 0x44, 0x64, 0x38, 0x6C, 0x40, 0x00  ; alpha
001145 ff7e
001146 4501
001147 7a4f
001148 0030                      Char_225:                   .db             0x7E, 0xFF, 0x01, 0x45, 0x4F, 0x7A, 0x30, 0x00  ; beta
001149 7f41
00114a 417f
00114b 0101
00114c 0003                      Char_226:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x01, 0x01, 0x03, 0x00  ; Gamma
00114d 7c08
00114e 043c
00114f 3c7c
001150 0006                      Char_227:                   .db             0x08, 0x7C, 0x3C, 0x04, 0x7C, 0x3C, 0x06, 0x00  ; pi
001151 6341
001152 5d77
001153 4149
001154 0063                      Char_228:                   .db             0x41, 0x63, 0x77, 0x5D, 0x49, 0x41, 0x63, 0x00  ; Sigma
001155 7c38
001156 4c44
001157 0434
001158 0004                      Char_229:                   .db             0x38, 0x7C, 0x44, 0x4C, 0x34, 0x04, 0x04, 0x00  ; sigma
001159 7cfc
00115a 4040
00115b 3c7c
00115c 0000                      Char_230:                   .db             0xFC, 0x7C, 0x40, 0x40, 0x7C, 0x3C, 0x00, 0x00  ; mu
00115d 0c08
00115e 7c04
00115f 043c
001160 0004                      Char_231:                   .db             0x08, 0x0C, 0x04, 0x7C, 0x3C, 0x04, 0x04, 0x00  ; tau
001161 3c18
001162 ffa5
001163 3ca5
001164 0018                      Char_232:                   .db             0x18, 0x3C, 0xA5, 0xFF, 0xA5, 0x3C, 0x18, 0x00  ; Phi
001165 7f3e
001166 4949
001167 7f49
001168 003e                      Char_233:                   .db             0x3E, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x3E, 0x00  ; theta
001169 5f4e
00116a 0171
00116b 5f71
00116c 004e                      Char_234:                   .db             0x4E, 0x5F, 0x71, 0x01, 0x71, 0x5F, 0x4E, 0x00  ; Omega
00116d 7830
00116e 4d4b
00116f 397d
001170 0002                      Char_235:                   .db             0x30, 0x78, 0x4B, 0x4D, 0x7D, 0x39, 0x02, 0x00  ; delta
001171 2418
001172 1824
001173 2418
001174 1824                      Char_236:                   .db             0x18, 0x24, 0x24, 0x18, 0x18, 0x24, 0x24, 0x18  ; infinity
001175 7458
001176 3c34
001177 2e2c
001178 001a                      Char_237:                   .db             0x58, 0x74, 0x34, 0x3C, 0x2C, 0x2E, 0x1A, 0x00  ; ????
001179 7c38
00117a 5454
00117b 4454
00117c 0000                      Char_238:                   .db             0x38, 0x7C, 0x54, 0x54, 0x54, 0x44, 0x00, 0x00  ; set symbol
00117d 7e7c
00117e 0202
00117f 7e02
001180 007c                      Char_239:                   .db             0x7C, 0x7E, 0x02, 0x02, 0x02, 0x7E, 0x7C, 0x00  ; set intersect symbol
001181 2a2a
001182 2a2a
001183 2a2a
001184 002a                      Char_240:                   .db             0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x00  ; triple equals
001185 4400
001186 5f44
001187 445f
001188 0044                      Char_241:                   .db             0x00, 0x44, 0x44, 0x5F, 0x5F, 0x44, 0x44, 0x00  ; plus/minus
001189 4000
00118a 5b51
00118b 444e
00118c 0000                      Char_242:                   .db             0x00, 0x40, 0x51, 0x5B, 0x4E, 0x44, 0x00, 0x00  ; greater than or equal
00118d 4400
00118e 5b4e
00118f 4051
001190 0000                      Char_243:                   .db             0x00, 0x44, 0x4E, 0x5B, 0x51, 0x40, 0x00, 0x00  ; less than or equal
001191 0000
001192 fe00
001193 01ff
001194 0607                      Char_244:                   .db             0x00, 0x00, 0x00, 0xFE, 0xFF, 0x01, 0x07, 0x06  ; integral, top
001195 e060
001196 ff80
001197 007f
001198 0000                      Char_245:                   .db             0x60, 0xE0, 0x80, 0xFF, 0x7F, 0x00, 0x00, 0x00  ; integral, bottom
001199 0800
00119a 2a08
00119b 082a
00119c 0008                      Char_246:                   .db             0x00, 0x08, 0x08, 0x2A, 0x2A, 0x08, 0x08, 0x00  ; division symbol
00119d 3624
00119e 3612
00119f 3624
0011a0 0012                      Char_247:                   .db             0x24, 0x36, 0x12, 0x36, 0x24, 0x36, 0x12, 0x00  ; approximately equal
0011a1 0200
0011a2 0507
0011a3 0207
0011a4 0000                      Char_248:                   .db             0x00, 0x02, 0x07, 0x05, 0x07, 0x02, 0x00, 0x00  ; degree symbol
0011a5 0000
0011a6 1800
0011a7 0018
0011a8 0000                      Char_249:                   .db             0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00  ; dot product
0011a9 0000
0011aa 1000
0011ab 0010
0011ac 0000                      Char_250:                   .db             0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00  ; dash, tiny
0011ad 3010
0011ae 4070
0011af 7f7f
0011b0 0101                      Char_251:                   .db             0x10, 0x30, 0x70, 0x40, 0x7F, 0x7F, 0x01, 0x01  ; square root
0011b1 0f01
0011b2 010e
0011b3 0e0f
0011b4 0000                      Char_252:                   .db             0x01, 0x0F, 0x0E, 0x01, 0x0F, 0x0E, 0x00, 0x00  ; superscript n
0011b5 0d0d
0011b6 0b0b
0011b7 0000
0011b8 0000                      Char_253:                   .db             0x0D, 0x0D, 0x0B, 0x0B, 0x00, 0x00, 0x00, 0x00  ; ????
0011b9 0000
0011ba 3c3c
0011bb 3c3c
0011bc 0000                      Char_254:                   .db             0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00  ; square, small black
0011bd 0000
0011be 0000
0011bf 0000
0011c0 0000                      Char_255:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 ; Description: calculates exact location in pixel array (X-pointer).
                                 ;              Used to display something at that location.
                                 ;              Note - to find array location: loc = ((y)/8)*WIDTH) + x .
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; --------------------------------------------------------------------------------
                                 GFX_set_array_pos:     
0011c1 920f                                                  push            r0                                      ; push all used registers to preserve them
0011c2 921f                                                  push            r1
0011c3 930f                                                  push            r16
0011c4 931f                                                  push            r17
0011c5 e1a0                                                  ldi             XL, low(pixel_array<<1)
0011c6 e0b2                                                  ldi             XH, high(pixel_array<<1)
0011c7 2f03                                                  mov             r16, r19                                ; copy y position
0011c8 7007                                                  andi            r16, (HEIGHT-1)/8                       ; get remainder (for vert byte position)
0011c9 e840                                                  ldi             r20, 0x80                               ; load a single bit to be rshifted into place (bit order reversed, which is function of the screen)
                                     GFX_set_array_pos_bit_place:
0011ca 3000                                                  cpi             r16, 0x00                               ; are we done shifting?
0011cb f019                                                  breq            GFX_set_array_pos_cont
0011cc 950a                                                  dec             r16                                     ; sub 1 from number of shifts
0011cd 9546                                                  lsr             r20                                     ; shift bit by one
0011ce cffb                                                  rjmp            GFX_set_array_pos_bit_place
                                     GFX_set_array_pos_cont:
0011cf 2f03                                                  mov             r16, r19                                ; copy y position; will hold result
0011d0 9506                                                  lsr             r16                                     ; i = y/8
0011d1 9506                                                  lsr             r16
0011d2 9506                                                  lsr             r16
0011d3 e810                                                  ldi             r17, WIDTH                              ; prep WIDTH
0011d4 9f01                                                  mul             r16, r17                                ; j = i*W
                                 
0011d5 0e02                                                  add             r0, r18                                 ; loc = j + x
0011d6 f408                                                  brcc            GFX_set_array_pos_end                   ; if a carry, must inc the result's high byte
0011d7 9413                                                  inc             r1
                                     GFX_set_array_pos_end:
0011d8 0da0                                                  add             XL, r0                                  ; add calculated location to pointer
0011d9 1db1                                                  adc             XH, r1
0011da 911f                                                  pop             r17                                     ; reinstate all pushed registers
0011db 910f                                                  pop             r16
0011dc 901f                                                  pop             r1
0011dd 900f                                                  pop             r0
0011de 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: blanks an 8pix by 8pix block.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X-pointer loaded with location to draw
                                 ; --------------------------------------------------------------------------------
                                 GFX_draw_blank:
0011df 930f                                                  push            r16
0011e0 931f                                                  push            r17
0011e1 2700                                                  clr             r16
0011e2 2711                                                  clr             r17
                                     GFX_draw_blank_loop:
0011e3 931d                                                  st              X+, r17
0011e4 9503                                                  inc             r16
0011e5 3008                                                  cpi             r16, 8
0011e6 f009                                                  breq            GFX_draw_blank_end
0011e7 cffb                                                  rjmp            GFX_draw_blank_loop
                                     GFX_draw_blank_end:
0011e8 911f                                                  pop             r17
0011e9 910f                                                  pop             r16
0011ea 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: draws character to the array (8pix x 8pix).
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X-pointer loaded with location to draw
                                 ; --------------------------------------------------------------------------------
                                 GFX_draw_shape:
0011eb 930f                                                  push            r16
0011ec 931f                                                  push            r17
0011ed 2700                                                  clr             r16
0011ee e0c0                                                  ldi             YL, low(sprite<<1)
0011ef e0d2                                                  ldi             YH, high(sprite<<1)
                                     GFX_draw_shape_loop:
0011f0 9119                                                  ld              r17, Y+
0011f1 931d                                                  st              X+, r17
0011f2 9503                                                  inc             r16
0011f3 3008                                                  cpi             r16, 8
0011f4 f009                                                  breq            GFX_draw_shape_end
0011f5 cffa                                                  rjmp            GFX_draw_shape_loop
                                     GFX_draw_shape_end:
0011f6 911f                                                  pop             r17
0011f7 910f                                                  pop             r16
0011f8 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets sprite to whatever char the Z pointer was prepped to.
                                 ;              This should used when you're using the supplied ascii_chars.asm
                                 ;              byte table.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - Z-pointer: loaded with pmem character location
                                 ; --------------------------------------------------------------------------------
                                 GFX_set_shape:
0011f9 930f                                                  push            r16
0011fa 931f                                                  push            r17
0011fb 2700                                                  clr             r16
0011fc e0c0                                                  ldi             YL, low(sprite<<1)
0011fd e0d2                                                  ldi             YH, high(sprite<<1)
                                     GFX_set_shape_loop:
0011fe 9115                                                  lpm             r17, Z+
0011ff 9319                                                  st              Y+, r17
001200 9503                                                  inc             r16
001201 3008                                                  cpi             r16, 8
001202 f009                                                  breq            GFX_set_shape_end
001203 cffa                                                  rjmp            GFX_set_shape_loop
                                     GFX_set_shape_end:
001204 911f                                                  pop             r17
001205 910f                                                  pop             r16
001206 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: clears array of all information (equivalent to clearing the screen).
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 GFX_clear_array:
001207 2711                                                  clr             r17
001208 2722                                                  clr             r18
001209 2733                                                  clr             r19
00120a e1a0                                                  ldi             XL, low(pixel_array<<1)
00120b e0b2                                                  ldi             XH, high(pixel_array<<1)
                                     GFX_clear_col:                                                                  ; for each col
00120c 3038                                                  cpi             r19, HEIGHT/8
00120d f440                                                  brcc            GFX_clear_done
                                         GFX_clear_row:                                                              ; for each row
00120e 3820                                                  cpi             r18, WIDTH
00120f f418                                                  brcc            GFX_clear_nr
001210 931d                                                  st              X+, r17
001211 9523                                                  inc             r18
001212 cffb                                                  rjmp            GFX_clear_row
                                             GFX_clear_nr:                                                           ; move to next row
001213 2722                                                  clr             r18
001214 9533                                                  inc             r19
001215 cff6                                                  rjmp            GFX_clear_col
                                     GFX_clear_done:                                                                 ; done clearing
001216 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328PB" register use summary:
x  :   4 y  :   2 z  :   2 r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  53 r17:  31 r18: 258 r19: 260 r20:   2 
r21:   0 r22:   0 r23:  12 r24:  12 r25:   8 r26: 250 r27: 250 r28:   2 
r29:   2 r30: 249 r31: 249 
Registers used: 19 out of 35 (54.3%)

"ATmega328PB" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   2 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   5 brcs  :   0 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   8 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 800 cbi   :   4 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  11 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   9 cpse  :   0 dec   :   9 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :   8 jmp   :   1 
ld    :   2 ldd   :   0 ldi   :1512 lds   :   0 lpm   :   2 lsl   :   0 
lsr   :   7 mov   :   4 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   0 ori   :   0 out   :   9 pop   :  20 
push  :  20 rcall :  16 ret   :  21 reti  :   0 rjmp  :  32 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 30 out of 113 (26.5%)

"ATmega328PB" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00242e   6676   2076   8752   32768  26.7%
[.dseg] 0x000100 0x000508      0   1032   1032    2048  50.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
